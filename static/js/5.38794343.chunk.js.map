{"version":3,"sources":["components/chat/chat.module.css","components/common/Emoji.tsx","components/chat/AddMessageForm.tsx","components/chat/MessageChat.tsx","components/chat/ChatPage.tsx"],"names":["module","exports","Emoji","chosenEmoji","onEmojiClick","emoji","preload","pickerStyle","width","height","AddMessageForm","React","memo","sendMessageForm","status","showEmoji","useState","message","setMessage","img","setImage","setChosenEmoji","setModalActive","fr","FileReader","onload","result","sendMessage","className","s","addMessageContent","onChange","e","currentTarget","value","onKeyPress","key","textarea","onClick","disabled","event","emojiObject","MessageChat","photo","userId","userName","to","userNameChat","src","alt","Avatar","Chat","useGaTracker","useSelector","state","chat","dispatch","useDispatch","useEffect","startMessagesListenerTC","stopMessagesListenerTC","MessagesChat","sendMessagesTC","messages","messageAnchorRef","useRef","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","scroll","onScroll","element","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","ref","ChatPage","auth","isAuth"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,OAAS,qBAAqB,SAAW,yB,0ICQ9CC,EAAQ,SAAC,GAA4C,IAA3CC,EAA0C,EAA1CA,YAAaC,EAA6B,EAA7BA,aAEhC,OAAO,mCACH,gCACKD,EACG,+CAAkBA,EAAYE,SAE9B,mDAEJ,cAAC,IAAD,CAAQD,aAAcA,EAAcE,SAAS,EAAMC,YAAa,CAACC,MAAO,QAASC,OAAQ,iBCLxFC,EAAiBC,IAAMC,MAAK,YAA+D,IAA7DC,EAA4D,EAA5DA,gBAAiBC,EAA2C,EAA3CA,OAAQC,EAAmC,EAAnCA,UAAmC,EAErEC,mBAAiB,IAFoD,mBAE5FC,EAF4F,KAEnFC,EAFmF,OAG3EF,qBAH2E,mBAG5FG,EAH4F,KAGvFC,EAHuF,OAI7DJ,qBAJ6D,mBAI5Fb,EAJ4F,KAI/EkB,EAJ+E,OAKxEL,oBAAkB,GAApCM,EAL0F,oBAM7FC,EAAK,IAAIC,WACfD,EAAGE,OAAS,WACRL,EAASG,EAAGG,SAGhB,IAAMC,EAAc,WAChB,GAAIR,EACAG,GAAe,OACZ,KAAKL,EACR,OAEAJ,EAAgBI,GAChBC,EAAW,MAiBnB,OAAO,sBAAKU,UAAWC,IAAEC,kBAAlB,UACC,0BAAUC,SAfD,SAACC,GACdd,EAAWc,EAAEC,cAAcC,QAcOC,WAZZ,SAACH,GACT,UAAVA,EAAEI,MACFT,IACAT,EAAW,MASkDgB,MAAOjB,EAASW,UAAS,UAAKC,IAAEQ,UAA7F,eACA,wBAAQC,QAASX,EAAaY,SAAqB,UAAXzB,EAAxC,kBACHC,GAAa,cAAC,EAAD,CAAOZ,YAAaA,EAAaC,aAR9B,SAACoC,EAAyBC,GAC3CpB,EAAeoB,GACfvB,EAAWD,EAAUwB,EAAYpC,iB,0JC5B1BqC,EAVK/B,IAAMC,MAAK,YAA6D,IAA3DK,EAA0D,EAA1DA,QAAS0B,EAAiD,EAAjDA,MAAOC,EAA0C,EAA1CA,OAAQC,EAAkC,EAAlCA,SACrD,OAAO,sBAAKjB,UAAS,wBAAd,UACH,eAAC,IAAD,CAASkB,GAAI,YAAcF,EAA3B,UACI,qBAAKhB,UAAWC,IAAEkB,aAAlB,SAAiCF,IAChCF,EAAQ,qBAAKK,IAAKL,EAAOf,UAAS,aAAgBqB,IAAK,KAAQ,cAACC,EAAA,EAAD,OAEpE,qBAAKtB,UAAWC,IAAEZ,QAAlB,SAA4BA,U,yCCW9BkC,EAAiB,WACnBC,cACA,IAAMtC,EAASuC,aAA4C,SAAAC,GAAK,OAAIA,EAAMC,KAAKzC,UACzE0C,EAAWC,cAEjBC,qBAAU,WAGN,OAFAF,EAASG,eAEF,WACHH,EAASI,kBAEd,CAACJ,IAKJ,OAAO,qCACS,UAAX1C,GAAsB,iFACvB,cAAC+C,EAAD,IACA,cAACnD,EAAA,EAAD,CAAgBG,gBAPI,SAACI,GACrBuC,EAASM,YAAe7C,KAM0BH,OAAQA,EAAQC,WAAS,QAItE8C,EAAyBlD,IAAMC,MAAK,WAC7C,IAAMmD,EAAWV,aAA+C,SAAAC,GAAK,OAAIA,EAAMC,KAAKQ,YAC9EC,EAAmBC,iBAAuB,MAFG,EAGXjD,oBAAkB,GAHP,mBAG5CkD,EAH4C,KAG9BC,EAH8B,KAoBnD,OANAT,qBAAU,WACa,IAAD,EAAdQ,IACA,UAAAF,EAAiBI,eAAjB,SAA0BC,eAAe,CAACC,SAAU,cAEzD,CAACJ,EAAcH,IAEX,mCACH,sBAAKnC,UAAS,yBAAoBC,IAAE0C,QAAUC,SAhB5B,SAACxC,GACnB,IAAMyC,EAAUzC,EAAEC,cACdyC,KAAKC,IAAIF,EAAQG,aAAeH,EAAQI,WAAaJ,EAAQK,aAAe,KAC3EZ,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAWpC,UACKJ,EAASgB,KAAI,SAACC,EAAGC,GAAJ,OAAc,cAAC,EAAD,CAAyBrC,OAAQoC,EAAEpC,OAAQ3B,QAAS+D,EAAE/D,QACzC4B,SAAUmC,EAAEnC,SAAUF,MAAOqC,EAAErC,OAD1BsC,MAE9C,qBAAKC,IAAKlB,EAAV,uBAKGmB,UA5DY,WAEvB,OADe9B,aAAqC,SAAAC,GAAK,OAAIA,EAAM8B,KAAKC,UAEjE,mCACH,cAAC,EAAD,MAFgB,cAAC,IAAD,CAAUvC,GAAI","file":"static/js/5.38794343.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"scroll\":\"chat_scroll__3PyJQ\",\"textarea\":\"chat_textarea__1hIq3\"};","import React from 'react';\r\nimport Picker, {IEmojiData} from 'emoji-picker-react';\r\n\r\n\r\ntype EmojiType = {\r\n    chosenEmoji: IEmojiData | undefined,\r\n    onEmojiClick: (event: React.MouseEvent, emojiObject: IEmojiData) => void\r\n}\r\n\r\nexport const Emoji = ({chosenEmoji, onEmojiClick}: EmojiType) => {\r\n\r\n    return <>\r\n        <div>\r\n            {chosenEmoji ? (\r\n                <span>You chose: {chosenEmoji.emoji}</span>\r\n            ) : (\r\n                <span>No emoji Chosen</span>\r\n            )}\r\n            <Picker onEmojiClick={onEmojiClick} preload={true} pickerStyle={{width: '450px', height: '250px'}}/>\r\n        </div>\r\n    </>\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport s from \"./chat.module.css\"\r\nimport {IEmojiData} from 'emoji-picker-react';\r\nimport {StatusChatType} from \"../../api/chat-api\";\r\nimport {Emoji} from \"../common/Emoji\";\r\n\r\ntype AddMessageFormType = {\r\n    sendMessageForm: (message: string) => void\r\n    status?: StatusChatType\r\n    userId?: string\r\n    showEmoji: boolean\r\n}\r\n\r\nexport const AddMessageForm = React.memo(({sendMessageForm, status, showEmoji}: AddMessageFormType) => {\r\n\r\n    const [message, setMessage] = useState<string>('')\r\n    const [img, setImage] = useState<string>()\r\n    const [chosenEmoji, setChosenEmoji] = useState<IEmojiData>();\r\n    const [, setModalActive] = useState<boolean>(false);\r\n    const fr = new FileReader();\r\n    fr.onload = function () {\r\n        setImage(fr.result as string)\r\n    }\r\n\r\n    const sendMessage = () => {\r\n        if (img) {\r\n            setModalActive(true)\r\n        } else if (!message) {\r\n            return\r\n        } else {\r\n            sendMessageForm(message)\r\n            setMessage('')\r\n        }\r\n    }\r\n    const onChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        setMessage(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            sendMessage()\r\n            setMessage('')\r\n        }\r\n    }\r\n    const onEmojiClick = (event: React.MouseEvent, emojiObject: IEmojiData) => {\r\n        setChosenEmoji(emojiObject);\r\n        setMessage(message + emojiObject.emoji);\r\n    }\r\n\r\n    return <div className={s.addMessageContent}>\r\n            <textarea onChange={onChange} onKeyPress={onKeyPressHandler} value={message} className={`${s.textarea}`}> </textarea>\r\n            <button onClick={sendMessage} disabled={status !== 'ready'}>Send</button>\r\n        {showEmoji && <Emoji chosenEmoji={chosenEmoji} onEmojiClick={onEmojiClick}/>}\r\n    </div>\r\n})","import React from \"react\";\r\nimport s from \"./chat.module.css\"\r\nimport Avatar from \"../common/Avatar\";\r\nimport {ChatMessageAPIType} from \"../../api/chat-api\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\n\r\nconst MessageChat = React.memo(({message, photo, userId, userName}: ChatMessageAPIType) => {\r\n    return <div className={`padding-s-tb border-b`}>\r\n        <NavLink to={'/profile/' + userId}>\r\n            <div className={s.userNameChat}>{userName}</div>\r\n            {photo ? <img src={photo} className={`img-circle`} alt={''}/> : <Avatar/>}\r\n        </NavLink>\r\n        <div className={s.message}>{message}</div>\r\n    </div>\r\n})\r\n\r\nexport default MessageChat","import React, {useEffect, useRef, useState} from 'react'\r\nimport s from \"./chat.module.css\"\r\nimport MessageChat from \"./MessageChat\"\r\nimport {StatusChatType} from \"../../api/chat-api\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {\r\n    ChatMessageType, sendMessagesTC,\r\n    startMessagesListenerTC,\r\n    stopMessagesListenerTC\r\n} from \"../../redux/ChatReducer\"\r\nimport {StoreStateType} from \"../../redux/redux-store\"\r\nimport {AddMessageForm} from \"./AddMessageForm\"\r\nimport {Redirect} from \"react-router-dom\";\r\nimport useGaTracker from \"../../useGaTracker\";\r\n\r\n\r\nconst ChatPage: React.FC = () => {\r\n    const isAuth = useSelector<StoreStateType, boolean>(state => state.auth.isAuth)\r\n    if (!isAuth) return <Redirect to={'/login'}/>\r\n    return <>\r\n        <Chat/>\r\n    </>\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n    useGaTracker()\r\n    const status = useSelector<StoreStateType, StatusChatType>(state => state.chat.status)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListenerTC())\r\n\r\n        return () => {\r\n            dispatch(stopMessagesListenerTC())\r\n        }\r\n    }, [dispatch])\r\n    const sendMessageForm = (message: string) => {\r\n        dispatch(sendMessagesTC(message))\r\n    }\r\n\r\n    return <>\r\n        {status === 'error' && <div> Some error occurred. Please refresh the page </div>}\r\n        <MessagesChat/>\r\n        <AddMessageForm sendMessageForm={sendMessageForm} status={status} showEmoji/>\r\n    </>\r\n}\r\n\r\nexport const MessagesChat: React.FC = React.memo(() => {\r\n    const messages = useSelector<StoreStateType, ChatMessageType[]>(state => state.chat.messages)\r\n    const messageAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] = useState<boolean>(true)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget\r\n        if (Math.abs(element.scrollHeight - element.scrollTop) - element.clientHeight < 200) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messageAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [isAutoScroll, messages])\r\n\r\n    return <>\r\n        <div className={`col gap-offset ${s.scroll}`} onScroll={scrollHandler}>\r\n            {messages.map((m, index) => <MessageChat key={index} userId={m.userId} message={m.message}\r\n                                                     userName={m.userName} photo={m.photo}/>)}\r\n            <div ref={messageAnchorRef}> </div>\r\n        </div>\r\n    </>\r\n})\r\n\r\nexport default ChatPage"],"sourceRoot":""}
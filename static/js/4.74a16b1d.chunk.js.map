{"version":3,"sources":["components/chat/chat.module.css","components/dialogs/Dialogs.module.css","components/common/Emoji.tsx","components/chat/AddMessageForm.tsx","components/dialogs/Message/Messages.module.css","components/common/modals/ModalInfo.module.css","components/common/modals/ModalQuestion.tsx","components/dialogs/Message/MessagePrivate.tsx","components/dialogs/Message/DialogsMessages.tsx","components/dialogs/Message/ActionDialogs.tsx","components/dialogs/Message/MessagesPage.tsx"],"names":["module","exports","Emoji","chosenEmoji","onEmojiClick","emoji","preload","pickerStyle","width","height","AddMessageForm","React","memo","sendMessageForm","status","showEmoji","useState","message","setMessage","img","setImage","setChosenEmoji","setModalActive","fr","FileReader","onload","result","sendMessage","className","s","addMessageContent","onChange","e","currentTarget","value","onKeyPress","key","textarea","onClick","disabled","event","emojiObject","ModalQuestion","title","active","setActive","onButtonModal","activeClassGround","modal","modal_active","activeClassModal","modal_content","modal_content_active","setAnswer","onKeyPressHandler","stopPropagation","buttonsQuestion","type","autoFocus","buttonQuestion","onKeyDown","MessagePrivate","messageData","photos","userId","myPhoto","dispatch","useDispatch","modalActive","messageStyle","recipientId","recipient","sender","withPhoto","small","data","DateTime","fromISO","addedAt","content","src","alt","Avatar","deletedByRecipient","deletedBySender","messageBody","body","setLocale","toFormat","bold","viewed","button","messageIsSpamTC","id","getFriendMessagesTC","Number","isNoMessageAC","messageDeleteTC","DialogsMessages","friendsAll","profile","messageAnchorRef","useRef","useSelector","state","dialogPage","isLoadingMessage","isNoMessage","page","setPage","isScrollUp","setIsScrollUp","currentMessageData","setCurrentMessageData","useEffect","current","scrollTop","setTimeout","scrollBy","behavior","top","scrollHeight","itIsCompanion","filter","p","String","dialogWindow","to","companionName","name","dialogScrollbar","onScroll","element","length","ref","messagesHistory","map","m","index","messagePrivateContent","large","messagesLoading","sendFriendMessageTC","ActionDialogs","user","startDialog","count","navLink","userName","big","hasNewMessages","newMessagesCount","MessagesPage","useGaTracker","useParams","followingInProgress","usersPage","isStartDialog","friendsDialogs","friends","isAuth","auth","profilePage","getUserProfileTC","getFriendsTC","term","friend","getAllDialogsTC","startDialogAC","startDialogsTC","friendsWithNewMessages","reduce","acc","u","some","f","push","friendsNoMessages","a","every","b","numberOfNewMessages","undefined","sort","dialogsContent","dialogItems","messagePageInfo","users","User","messages"],"mappings":"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","file":"static/js/4.74a16b1d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"scroll\":\"chat_scroll__3PyJQ\",\"textarea\":\"chat_textarea__1hIq3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogItems\":\"Dialogs_dialogItems__5F9JH\",\"messages\":\"Dialogs_messages__JCIKe\",\"users\":\"Dialogs_users__15ZW7\",\"dialogScrollbar\":\"Dialogs_dialogScrollbar__LTJ-G\"};","import React from 'react';\r\nimport Picker, {IEmojiData} from 'emoji-picker-react';\r\n\r\n\r\ntype EmojiType = {\r\n    chosenEmoji: IEmojiData | undefined,\r\n    onEmojiClick: (event: React.MouseEvent, emojiObject: IEmojiData) => void\r\n}\r\n\r\nexport const Emoji = ({chosenEmoji, onEmojiClick}: EmojiType) => {\r\n\r\n    return <>\r\n        <div>\r\n            {chosenEmoji ? (\r\n                <span>You chose: {chosenEmoji.emoji}</span>\r\n            ) : (\r\n                <span>No emoji Chosen</span>\r\n            )}\r\n            <Picker onEmojiClick={onEmojiClick} preload={true} pickerStyle={{width: '450px', height: '250px'}}/>\r\n        </div>\r\n    </>\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport s from \"./chat.module.css\"\r\nimport {IEmojiData} from 'emoji-picker-react';\r\nimport {StatusChatType} from \"../../api/chat-api\";\r\nimport {Emoji} from \"../common/Emoji\";\r\n\r\ntype AddMessageFormType = {\r\n    sendMessageForm: (message: string) => void\r\n    status?: StatusChatType\r\n    userId?: string\r\n    showEmoji: boolean\r\n}\r\n\r\nexport const AddMessageForm = React.memo(({sendMessageForm, status, showEmoji}: AddMessageFormType) => {\r\n\r\n    const [message, setMessage] = useState<string>('')\r\n    const [img, setImage] = useState<string>()\r\n    const [chosenEmoji, setChosenEmoji] = useState<IEmojiData>();\r\n    const [, setModalActive] = useState<boolean>(false);\r\n    const fr = new FileReader();\r\n    fr.onload = function () {\r\n        setImage(fr.result as string)\r\n    }\r\n\r\n    const sendMessage = () => {\r\n        if (img) {\r\n            setModalActive(true)\r\n        } else if (!message) {\r\n            return\r\n        } else {\r\n            sendMessageForm(message)\r\n            setMessage('')\r\n        }\r\n    }\r\n    const onChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        setMessage(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            sendMessage()\r\n            setMessage('')\r\n        }\r\n    }\r\n    const onEmojiClick = (event: React.MouseEvent, emojiObject: IEmojiData) => {\r\n        setChosenEmoji(emojiObject);\r\n        setMessage(message + emojiObject.emoji);\r\n    }\r\n\r\n    return <div className={s.addMessageContent}>\r\n            <textarea onChange={onChange} onKeyPress={onKeyPressHandler} value={message} className={`${s.textarea}`}> </textarea>\r\n            <button onClick={sendMessage} disabled={status !== 'ready'}>Send</button>\r\n        {showEmoji && <Emoji chosenEmoji={chosenEmoji} onEmojiClick={onEmojiClick}/>}\r\n    </div>\r\n})","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Messages_button__3-LlH\",\"recipient\":\"Messages_recipient__bYYMU\",\"sender\":\"Messages_sender__W6npE\",\"message\":\"Messages_message__1GR7A\",\"messageBody\":\"Messages_messageBody__Ul-u9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"ModalInfo_modal__rgXMO\",\"modal_active\":\"ModalInfo_modal_active__13Pfu\",\"modal_content\":\"ModalInfo_modal_content__1wv08\",\"modal_content_active\":\"ModalInfo_modal_content_active__2Yb80\",\"buttonsQuestion\":\"ModalInfo_buttonsQuestion__2YHtQ\"};","import React, {KeyboardEvent, useState} from 'react';\r\nimport s from './ModalInfo.module.css'\r\n\r\ntype ModalType = {\r\n    title: string;\r\n    active: boolean;\r\n    setActive: (value: boolean) => void\r\n    onButtonModal: () => void\r\n}\r\n\r\nexport const ModalQuestion = ({title, active, setActive, onButtonModal}: ModalType) => {\r\n    const activeClassGround = active ? `${s.modal} ${s.modal_active}` : `${s.modal}`\r\n    const activeClassModal = active ? `${s.modal_content} ${s.modal_content_active}` : `${s.modal_content}`\r\n\r\n    const [, setAnswer] = useState(false);\r\n\r\n    const setTrue = () => {\r\n        onButtonModal()\r\n        setActive(false);\r\n    };\r\n    const setFalse = () => {\r\n        setAnswer(false);\r\n        setActive(false);\r\n    };\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === \"Enter\") { // TODO: не слушается\r\n            onButtonModal();\r\n            setActive(false);\r\n        }\r\n        if (e.key === \"Backspace\" || \"Escape\") {\r\n            setAnswer(false);\r\n            setActive(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={activeClassGround} onClick={() => setActive(false)}>\r\n            <div className={activeClassModal} onClick={e => e.stopPropagation()}>\r\n                <div>{title}</div>\r\n                <div className={s.buttonsQuestion}>\r\n                    <input type='button' value='Yes' autoFocus\r\n                           onKeyPress={onKeyPressHandler} onClick={setTrue} className={s.buttonQuestion}/>\r\n                    <input type='button' value='No' autoFocus\r\n                           onKeyDown={onKeyPressHandler} onClick={setFalse} className={s.buttonQuestion}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useState} from \"react\"\r\nimport s from \".//Messages.module.css\"\r\nimport Avatar from \"../../common/Avatar\"\r\nimport {\r\n    getFriendMessagesTC, isNoMessageAC,\r\n    MessageDataType,\r\n    messageDeleteTC,\r\n    messageIsSpamTC,\r\n} from \"../../../redux/DialogsReducer\"\r\nimport {PhotoUsersType} from \"../../../redux/UsersReducer\"\r\n//import deleteScr from './../../../image/deleteSrc.png' / TODO: вернуть картинки\r\n//import spamScr from './../../../image/spamSrc.png' / TODO: вернуть картинки\r\nimport {useDispatch} from \"react-redux\"\r\nimport {ModalQuestion} from \"../../common/modals/ModalQuestion\"\r\nimport {DateTime} from 'luxon';\r\n\r\n\r\ntype PropsType = {\r\n    messageData: MessageDataType\r\n    photos?: PhotoUsersType\r\n    userId?: string\r\n    myPhoto?: string\r\n}\r\n\r\nconst MessagePrivate = React.memo(({messageData, photos, userId, myPhoto}: PropsType) => {\r\n    const dispatch = useDispatch()\r\n    const [modalActive, setModalActive] = useState<boolean>(false)\r\n    const messageStyle = userId && +userId === messageData.recipientId ? s.recipient : s.sender\r\n    const withPhoto = userId && +userId === messageData.recipientId ? myPhoto : photos && photos.small\r\n    const data = DateTime.fromISO(messageData.addedAt)\r\n\r\n\r\n    const onMessageSpam = () => {\r\n        dispatch(messageIsSpamTC(messageData.id))\r\n        dispatch(getFriendMessagesTC(Number(userId), 1, 20))\r\n        dispatch(isNoMessageAC(false))\r\n    }\r\n    const onMessageDelete = () => {\r\n        dispatch(messageDeleteTC(messageData.id))\r\n        dispatch(getFriendMessagesTC(Number(userId), 1, 20))\r\n        dispatch(isNoMessageAC(false))\r\n    }\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <div className={`${s.message} ${messageStyle}`}>\r\n                {photos && <div>\r\n                    {<img src={withPhoto} alt={''} width={50} className={`img-circle`}/> ?\r\n                        <img src={withPhoto} alt={''} width={50} className={`img-circle`}/> : <Avatar/>}\r\n                </div>}\r\n\r\n                    {messageData.deletedByRecipient ?\r\n                        <span> {'Deleted by companion'} </span> : messageData.deletedBySender ?\r\n                            <span> {'Deleted by you'} </span> :\r\n                            <>\r\n                                <div className={`${s.messageBody}`}> {messageData.body} </div>\r\n                                <div> {data.setLocale('ru').toFormat('dd LLL yyyy HH:mm ')} </div>\r\n                                <div className={s.bold}> {!messageData.viewed && 'Message not viewed'} </div>\r\n                                <div>\r\n                                    {userId && +userId === messageData.recipientId ?\r\n                                        <button onClick={() => setModalActive(true)} className={s.button}>{/*<img\r\n                                            src={deleteScr} alt={'delete'}/>*/} del </button> :\r\n                                        <button onClick={() => setModalActive(true)} className={s.button}>{/*<img\r\n                                            src={spamScr} alt={'spam'}/>*/} spam </button>}\r\n                                </div>\r\n                            </>}\r\n\r\n                <ModalQuestion title={'Are you sure?'} active={modalActive} setActive={setModalActive}\r\n                               onButtonModal={onMessageSpam}/>\r\n                <ModalQuestion title={'Are you sure?'} active={modalActive} setActive={setModalActive}\r\n                               onButtonModal={onMessageDelete}/>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MessagePrivate","import React, {useEffect, useRef, useState} from \"react\";\r\nimport s from \"../Dialogs.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getFriendMessagesTC,\r\n    MessageDataType,\r\n    sendFriendMessageTC\r\n} from \"../../../redux/DialogsReducer\";\r\nimport {AddMessageForm} from \"../../chat/AddMessageForm\";\r\nimport MessagePrivate from \"./MessagePrivate\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Avatar from \"../../common/Avatar\";\r\nimport {FriendNewMessageType} from \"./MessagesPage\";\r\nimport {ProfileType} from \"../../../redux/ProfileReducer\";\r\nimport {StoreStateType} from \"../../../redux/redux-store\";\r\n\r\ntype DialogsMessagesType = {\r\n    userId: string,\r\n    friendsAll: FriendNewMessageType[],\r\n    messageData: MessageDataType[],\r\n    profile: ProfileType\r\n}\r\nexport const DialogsMessages = React.memo(({userId, friendsAll, profile, messageData}: DialogsMessagesType) => {\r\n    const dispatch = useDispatch()\r\n    const messageAnchorRef = useRef<HTMLDivElement>(null)\r\n    const {isLoadingMessage, isNoMessage} = useSelector((state: StoreStateType) => state.dialogPage)\r\n    const [page, setPage] = useState<number>(2)\r\n    const [isScrollUp, setIsScrollUp] = useState<boolean>(false)\r\n    const [currentMessageData, setCurrentMessageData] = useState<MessageDataType[]>([...messageData])\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget\r\n        if (!isNoMessage && messageData.length > 0 && element.scrollTop === 0) {\r\n            setPage(page + 1)\r\n            if (messageAnchorRef.current) {\r\n                messageAnchorRef.current.scrollBy({\r\n                    behavior: 'smooth',\r\n                    top: messageAnchorRef.current.scrollHeight / (page - 1)\r\n                })\r\n                setIsScrollUp(true)\r\n            }\r\n            dispatch(getFriendMessagesTC(Number(userId), page, 20, currentMessageData))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCurrentMessageData(messageData)\r\n    }, [messageData])\r\n\r\n    useEffect(() => {\r\n        if (isNoMessage && messageAnchorRef.current) {\r\n            messageAnchorRef.current.scrollTop = 0\r\n        }\r\n    }, [isNoMessage])\r\n\r\n    useEffect(() => {\r\n        !isScrollUp && setTimeout(() => {\r\n            if (messageAnchorRef.current) {\r\n                messageAnchorRef.current.scrollBy({behavior: 'smooth', top: messageAnchorRef.current.scrollHeight})\r\n            }\r\n        }, 0)\r\n    }, [isScrollUp, messageData])\r\n\r\n    const itIsCompanion = friendsAll.filter(p => String(p.id) === userId)\r\n\r\n    const addNewMessage = (message: string) => {\r\n        dispatch(sendFriendMessageTC(Number(userId), message))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={s.dialogWindow}>\r\n                <NavLink to={'/profile/' + userId}>\r\n                    {<h2 className={s.companionName}>{itIsCompanion[0].name}</h2>}\r\n                    {itIsCompanion ?\r\n                        <img src={itIsCompanion[0].photos.small} className={`img-circle`}\r\n                             alt={''}/> : <Avatar/>}\r\n\r\n                </NavLink>\r\n\r\n                <div className={s.dialogScrollbar} onScroll={scrollHandler} ref={messageAnchorRef}>\r\n                    {!isNoMessage && currentMessageData.length > 19 && <div className={s.messagesHistory}>\r\n                        {'Предыдущие сообщения'}\r\n                    </div>}\r\n                    {isNoMessage && <div className={s.messagesHistory}> {'Больше сообщений нет'}\r\n                    </div>}\r\n                    {profile && currentMessageData && currentMessageData.map((m, index) => <div\r\n                        key={`message-${index}`} className={s.messagePrivateContent}>\r\n                        <MessagePrivate messageData={m} key={index} photos={itIsCompanion[0].photos}\r\n                                        userId={userId} myPhoto={profile?.photos.large}/></div>)}\r\n                    {isLoadingMessage === 'loading' && <div className={s.messagesLoading}> {'Is Loading'}\r\n                    </div>}\r\n                </div>\r\n            </div>\r\n            <AddMessageForm sendMessageForm={addNewMessage} status={'ready'} showEmoji={false}/>\r\n        </>\r\n    )\r\n})","import React from \"react\";\r\nimport s from \"../Dialogs.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n//import email from './../../../image/email3.png' / TODO: вернуть картинки\r\nimport {FriendDialogsType} from \"../../../redux/DialogsReducer\";\r\nimport Avatar from \"../../common/Avatar\";\r\n\r\n\r\ntype PropsType = {\r\n    user: FriendDialogsType\r\n    page: number\r\n    count: number\r\n    navLink?: string\r\n    startDialog: (userID: string, page: number, count: number) => void\r\n}\r\n\r\nconst ActionDialogs = (\r\n    {\r\n        user, startDialog,\r\n        page, count, navLink\r\n    }: PropsType\r\n) => {\r\n\r\n    return <>\r\n        <div>\r\n            <div> {user.userName} </div>\r\n            <NavLink to={navLink + String(user.id)}>\r\n                {user.photos.small ? <img src={user.photos.small} alt={''} width={75}/> : user.photos.big ?\r\n                    <img src={user.photos.big} alt={''} width={75}/> : <Avatar />}\r\n            </NavLink>\r\n        </div>\r\n        <div>\r\n            <NavLink to={navLink + String(user.id)} className={s.navLink}>\r\n                <button onClick={() => startDialog(String(user.id), page, count)}> To write message</button>\r\n                {user.hasNewMessages &&\r\n                <span>\r\n                   {/*<img src={email} alt={''} height={25}/>*/}\r\n                   <span className={s.newMessagesCount}> {user.newMessagesCount} </span>\r\n                </span>}\r\n            </NavLink>\r\n        </div>\r\n    </>\r\n}\r\n\r\nexport default ActionDialogs;","import React, {useEffect} from \"react\";\r\nimport s from \"../Dialogs.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    LocationUsersType,\r\n    PhotoUsersType\r\n} from \"../../../redux/UsersReducer\";\r\nimport {StoreStateType} from \"../../../redux/redux-store\";\r\nimport User from \"../../users/User\";\r\nimport {\r\n    getAllDialogsTC,\r\n    getFriendMessagesTC,\r\n    getFriendsTC, isNoMessageAC,\r\n    startDialogAC,\r\n    startDialogsTC\r\n} from \"../../../redux/DialogsReducer\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {DialogsMessages} from \"./DialogsMessages\";\r\nimport ActionDialogs from \"./ActionDialogs\";\r\nimport {getUserProfileTC, ProfileType} from \"../../../redux/ProfileReducer\";\r\nimport useGaTracker from \"../../../useGaTracker\";\r\n\r\nexport type FriendNewMessageType = {\r\n    id: string,\r\n    avatar: string,\r\n    followed: boolean,\r\n    name: string,\r\n    status: string,\r\n    location: LocationUsersType,\r\n    photos: PhotoUsersType\r\n    hasNewMessages: boolean\r\n    newMessagesCount: number\r\n}\r\n\r\n\r\nconst MessagesPage = () => {\r\n    useGaTracker()\r\n    let dispatch = useDispatch()\r\n    let {userId} = useParams<{ userId?: string | undefined }>()\r\n    const {followingInProgress} = useSelector((state: StoreStateType) => state.usersPage)\r\n    const {\r\n        isStartDialog, friendsDialogs, page, count, friends, messageData\r\n    } = useSelector((state: StoreStateType) => state.dialogPage)\r\n    const isAuth = useSelector<StoreStateType, boolean>(state => state.auth.isAuth)\r\n    const id = useSelector<StoreStateType, number>(state => state.auth.id)\r\n    const profile = useSelector<StoreStateType, ProfileType>(state => state.profilePage.profile)\r\n\r\n    useEffect(() => {\r\n        dispatch(getUserProfileTC(String(id)))\r\n        dispatch(getFriendsTC(page, count, {term: '', friend: true}))\r\n        dispatch(getAllDialogsTC())\r\n    }, [dispatch, id, page, count])\r\n\r\n    const startDialog = (userId: string) => {\r\n\r\n        dispatch(startDialogAC(false))\r\n        dispatch(isNoMessageAC(false))\r\n        dispatch(startDialogsTC(Number(userId)))\r\n        dispatch(getFriendMessagesTC(Number(userId), 1, 20))\r\n\r\n    }\r\n\r\n\r\n\r\n    const friendsWithNewMessages = friends.reduce((acc, u) => {\r\n        friendsDialogs.some((f) => {\r\n            if (f.id === +u.id) {\r\n                // @ts-ignore\r\n                acc.push({...u, hasNewMessages: f.hasNewMessages, newMessagesCount: f.newMessagesCount})\r\n            }\r\n        })\r\n        return acc\r\n    }, [])\r\n    // @ts-ignore\r\n    const friendsNoMessages = friends.filter(a => friendsWithNewMessages.every(b => a.id !== b.id))\r\n\r\n    // @ts-ignore\r\n    const friendsAll: FriendNewMessageType[] = [...friendsNoMessages, ...friendsWithNewMessages]\r\n    const numberOfNewMessages: number = friendsAll.reduce((acc, u) => {\r\n        if (u.newMessagesCount === undefined) {\r\n            return acc\r\n        } else {\r\n            return acc + u.newMessagesCount\r\n        }\r\n    }, 0)\r\n    friendsAll.sort(function (b, a) {\r\n        if (!a.newMessagesCount) {\r\n            a.newMessagesCount = 0\r\n        } else if (!b.newMessagesCount) {\r\n            b.newMessagesCount = 0\r\n        }\r\n        return a.newMessagesCount - b.newMessagesCount\r\n    })\r\n\r\n    if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n\r\n    return (\r\n        <div className={`row top left gap-offset ${s.dialogsContent}`}>\r\n            <div className={s.dialogItems}> {/*имена друзей*/}\r\n                <div className={s.messagePageInfo}> {'Number of friends: ' + friendsAll.length} </div>\r\n                <div className={s.messagePageInfo}> {'New messages: ' + numberOfNewMessages} </div>\r\n                <div className={`col gap-offset ${s.users}`}>\r\n                    {friendsAll.map((u, index) => <div key={`user-${index}`}>\r\n                        <User user={u} followingInProgress={followingInProgress}\r\n                              startDialog={startDialog} page={page} count={count}\r\n                              navLink={'/dialogs/'} hasNewMessages={u.hasNewMessages}\r\n                              newMessagesCount={u.newMessagesCount}/>\r\n                    </div>)}\r\n                </div>\r\n                <div className={s.messagePageInfo}>{'Action dialogs: '}</div>\r\n                {friendsDialogs.filter(f => f.hasNewMessages).map((u, index) => <div key={`dialog-${index}`}>\r\n                    <ActionDialogs user={u} startDialog={startDialog} page={page} count={count}\r\n                                   navLink={'/dialogs/'}/>\r\n                </div>)}\r\n            </div>\r\n            {isStartDialog && userId ? <div className={s.messages}>\r\n              <DialogsMessages userId={userId} friendsAll={friendsAll} profile={profile} messageData={messageData}/>\r\n            </div> : <h2 className={s.messages}> Select dialog </h2>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessagesPage"],"sourceRoot":""}
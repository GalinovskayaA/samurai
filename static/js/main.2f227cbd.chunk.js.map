{"version":3,"sources":["components/header/header.module.css","components/users/User.tsx","api/chat-api.ts","redux/ChatReducer.tsx","utils/objects-helper.tsx","redux/UsersReducer.tsx","api/profile-api.ts","redux/ProfileReducer.tsx","reportWebVitals.js","redux/FriendsReducer.tsx","api/auth-api.ts","api/security-api.ts","redux/AuthReducer.tsx","redux/AppReducer.tsx","redux/redux-store.tsx","components/nav/NavBar.tsx","components/common/Preloader.tsx","components/common/paginator/Paginator.tsx","components/common/SearchForm.tsx","components/common/paginator/Select.tsx","components/users/Users.tsx","components/users/UsersContainer.tsx","hoc/withSuspense.tsx","components/common/FormsControls.tsx","utils/validators/validators.tsx","utils/createField.tsx","components/login/LoginReduxForm.tsx","components/login/Login.tsx","components/profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/profile/ProfileInfo/Contacts.tsx","components/common/FormErrorMessage.tsx","components/profile/ProfileInfo/ProfileData.tsx","components/profile/ProfileInfo/ProfileDataForm.tsx","components/profile/ProfileInfo/ProfileInfo.tsx","components/profile/Profile.tsx","components/profile/ProfileComponent.tsx","Routes.tsx","components/nav/Nav.tsx","components/header/Header.tsx","components/header/HeaderContainer.tsx","GoogleAnalytics.tsx","App.tsx","AppContainer.tsx","index.tsx","useGaTracker.js","components/profile/ProfileInfo/ProfileInfo.module.css","api/users-api.ts","components/nav/nav.module.css","components/common/FormsControls.module.css","App.module.css","components/users/users.module.css","components/common/Avatar.tsx","api/dialogs-api.ts","utils/messages.helper.tsx","redux/DialogsReducer.tsx","components/common/paginator/Paginator.module.css","api/api.ts"],"names":["module","exports","User","user","followingInProgress","startDialog","page","count","navLink","hasNewMessages","newMessagesCount","dispatch","useDispatch","className","name","to","id","photos","small","src","alt","width","big","status","followed","disabled","some","onClick","usersID","unfollowTC","followTC","s","subscribers","ws","notifySubscribersAboutStatus","forEach","closeHandler","setTimeout","createChannel","openHandler","errorHandler","console","error","messageHandler","e","newMessages","JSON","parse","data","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","filter","message","send","initialState","messages","_newMessageHandler","_statusChangedHandler","newMessageHandlerCreator","type","payload","messagesReceivedAC","statusChangedHandlerCreator","statusChangedAC","startMessagesListenerTC","a","stopMessagesListenerTC","sendMessagesTC","chatReducer","state","action","map","m","v1","index","array","length","updateObjectArray","users","itemId","newObjProps","pageSize","totalUsersCount","currentPage","isFetching","term","friend","usersReducer","userID","followSuccessAC","unfollowSuccessAC","setCurrentPageAC","setPageSizeAC","toggleIsFetchingAC","followingInProgressAC","setFilterAC","getUsersTC","getUsersAPI","getUsers","items","totalCount","_followUnfollowFlow","usersAPI","follow","bind","unfollow","apiMethod","actionCreator","resultCode","profileAPI","instance","get","put","photoFile","formData","FormData","append","headers","profile","newMessage","networkData","logo","background","navBar","profileInfoData","content","backgroundImg","arrayMyPosts","avatar","amount","profileReducer","p","setUserProfileAC","userIsFetchingAC","setStatusAC","getUserProfileTC","userId","response","setStatusTC","updateStatusTC","savePhotoTC","file","saveProfileTC","getState","auth","toString","stopSubmit","_error","Promise","reject","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","friends","authAPI","email","password","rememberMe","captcha","post","delete","securityAPI","login","isAuth","captchaUrl","authReducer","setAuthUserDataAC","getCaptchaUrlAC","getAuthUserDataTC","ResultCodesEnum","Success","getCaptchaUrlTC","url","initialized","rootReducer","combineReducers","profilePage","dialogPage","dialogsReducer","friendPage","usersPage","form","formReducer","app","chat","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","NavBar","props","item","Preloader","Paginator","onPageChanged","useSelector","useEffect","useState","value","setValue","currentValue","pagesCount","Math","ceil","pages","i","onClickPageChanged","endPages","startPages","onChange","Number","currentTarget","onKeyPress","key","placeholder","step","min","max","range","ShowButton","cn","selectedPage","SearchForm","React","memo","onFilterChanged","enableReinitialize","initialValues","String","validate","values","onSubmit","handleChange","handleBlur","handleSubmit","onBlur","as","Select","Users","history","useHistory","query","pathname","search","queryString","startDialogAC","portionSize","u","UsersPageComponent","useGaTracker","withSuspense","Component","Suspense","fallback","TextareaFormsController","input","meta","children","restProps","InputFormsController","FormsController","touched","hasError","formControl","required","createField","validators","component","text","Field","LoginReduxForm","reduxForm","formSummaryError","Login","ResultCodeForCaptchaEnum","CaptchaIsRequired","loginTC","ProfileStatusWithHooks","statusUser","editMode","setEditMode","setStatus","onDoubleClick","autoFocus","deactivateEditMode","Contacts","contactTitle","contactValue","contact","FormErrorMessage","Error","ProfileData","isOwner","goToEditMode","fullName","lookingForAJobDescription","aboutMe","contacts","Object","keys","ProfileDataFormReduxForm","ProfileInfo","ava","large","Avatar","formInput","target","files","selectInput","Profile","ProfileComponent","useParams","meId","useRef","current","Messages","lazy","ChatPage","PATH","withRouter","appWrapperContent","exact","path","render","Nav","nav","activeClassName","activeLink","Header","header","loginBlock","logoutTC","HeaderContainer","this","connect","NaN","currentLocation","location","gtag","document","title","href","log","catchAllUnhandledErrors","promise","all","catch","appWrapper","main","SamuraiAppContainer","ReactDOM","StrictMode","getElementById","useLocation","setInitialized","includes","ReactGA","initialize","pageview","hash","dialogsAPI","body","messageId","combineMessages","arr","arr2","concat","findIndex","splice","messageData","friendsDialogs","totalFriendsCount","isStartDialog","isLoadingMessage","isNoMessage","isViewed","setPageAC","setCountAC","setMessagesAC","isLoadingMessageAC","isNoMessageAC","sendMessageAC","startDialogsTC","getAllDialogsTC","getFriendMessagesTC","newMessageData","sendFriendMessageTC","messageIsSpamTC","messageDeleteTC","getFriendsTC","axios","create","withCredentials","baseURL"],"mappings":"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","file":"static/js/main.2f227cbd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__1l8b-\",\"loginBlock\":\"header_loginBlock__3V1NH\"};","import React from \"react\"\r\nimport s from \"./users.module.css\"\r\nimport {followTC, unfollowTC, UsersType} from \"../../redux/UsersReducer\"\r\nimport {NavLink} from \"react-router-dom\"\r\nimport Avatar from \"../common/Avatar\"\r\n//import email from './../../image/email3.png' / TODO: вернуть картинки\r\nimport {FriendNewMessageType} from \"../dialogs/Message/MessagesPage\"\r\nimport {useDispatch} from \"react-redux\"\r\n\r\ntype PropsType = {\r\n    user: FriendNewMessageType | UsersType\r\n    followingInProgress: Array<string>\r\n    page: number\r\n    count: number\r\n    hasNewMessages?: boolean\r\n    newMessagesCount?: number\r\n    navLink?: string\r\n    startDialog: (userID: string, page: number, count: number) => void\r\n}\r\n\r\nconst User = (\r\n    {\r\n        user, followingInProgress,\r\n        startDialog, page, count, navLink,\r\n        hasNewMessages, newMessagesCount\r\n    }: PropsType\r\n) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const follow = (usersID: string) => {\r\n        dispatch(followTC(usersID))\r\n    }\r\n    const unfollow = (usersID: string) => {\r\n        dispatch(unfollowTC(usersID))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={`col center`}>\r\n                <div className={`text-overflow-hidden padding-s-tb`}> {user.name} </div>\r\n                <NavLink to={navLink + user.id}>\r\n                    {user.photos.small ? <img src={user.photos.small} alt={''} width={75} className={`img-circle`}/> : user.photos.big ?\r\n                        <img src={user.photos.big} alt={''} width={75} className={`img-circle`}/> : <Avatar />}\r\n                </NavLink>\r\n                <div className={`text-overflow-hidden padding-s-tb row left`}> {user.status || \"no status\"}</div>\r\n                {\r\n                    user.followed ?\r\n                        <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n                            unfollow(user.id)\r\n                        }}> Unfollow </button>\r\n                        : <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n                            follow(user.id)\r\n                        }}> Follow </button>\r\n                }\r\n            </div>\r\n            <div  className={`col center`}>\r\n                <NavLink to={navLink + user.id} className={s.navLink}>\r\n                    <button onClick={() => startDialog(user.id, page, count)} className={`offset-s-t`}> To write </button>\r\n                    {hasNewMessages &&\r\n                    <span>\r\n                        {/*<img src={email} alt={''} height={25}/>*/}\r\n                        <span className={s.newMessagesCount}> {newMessagesCount} </span>\r\n                    </span>}\r\n                </NavLink>\r\n            </div>\r\n        </>)\r\n}\r\n\r\nexport default User;","let subscribers = {\r\n    'messages-received': [] as MessageReceivedSubscriberType[],\r\n    'status-changed': [] as StatusChangedSubSubscriberType[]\r\n}\r\n\r\nlet ws: WebSocket | null = null\r\nconst notifySubscribersAboutStatus = (status: StatusChatType) => {\r\n    subscribers['status-changed'].forEach(s => s(status))\r\n}\r\nconst closeHandler = () => {   // пересоздание канала, если он оборвался\r\n    notifySubscribersAboutStatus('pending')\r\n    setTimeout(createChannel, 3000)\r\n}\r\nconst openHandler = () => {\r\n    notifySubscribersAboutStatus('ready')\r\n};\r\nconst errorHandler = () => {\r\n    notifySubscribersAboutStatus('error')\r\n    console.error('REFRESH PAGE')\r\n};\r\nconst messageHandler = (e: MessageEvent) => {\r\n    const newMessages = JSON.parse(e.data)\r\n    subscribers['messages-received'].forEach(s => s(newMessages))\r\n};\r\nconst cleanUp = () => {\r\n    ws?.removeEventListener('close', closeHandler) // отписываемся от старого\r\n    ws?.removeEventListener('message', messageHandler)\r\n    ws?.removeEventListener('open', openHandler)\r\n    ws?.removeEventListener('error', errorHandler)\r\n}\r\n\r\nfunction createChannel() {\r\n    cleanUp()\r\n    ws?.close()\r\n\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n    notifySubscribersAboutStatus('pending')\r\n    ws.addEventListener('close', closeHandler)\r\n    ws.addEventListener('message', messageHandler)\r\n    ws.addEventListener('open', openHandler)\r\n    ws.addEventListener('error', errorHandler)\r\n    notifySubscribersAboutStatus('ready')\r\n}\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        createChannel()\r\n    },\r\n    stop() {\r\n        subscribers['messages-received'] = []\r\n        subscribers['status-changed'] = []\r\n        cleanUp()\r\n        ws?.close()\r\n    },\r\n    subscribe(eventName: EventsNamesType, callback: CallbackType) {\r\n        // @ts-ignore\r\n        subscribers[eventName].push(callback);\r\n        return () => {\r\n            // @ts-ignore\r\n            subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n        }\r\n    },\r\n    unsubscribe(eventName: EventsNamesType, callback: CallbackType) {\r\n        // @ts-ignore\r\n        subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message)\r\n    }\r\n}\r\n\r\ntype MessageReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\r\ntype StatusChangedSubSubscriberType = (status: StatusChatType) => void\r\ntype CallbackType = MessageReceivedSubscriberType | StatusChangedSubSubscriberType\r\n\r\ntype EventsNamesType = 'messages-received' | 'status-changed'\r\nexport type StatusChatType = 'pending' | 'ready' | 'error'\r\n\r\nexport type ChatMessageAPIType = {\r\n    message: string,\r\n    photo: string,\r\n    userId: number | string,\r\n    userName: string,\r\n}\r\n","import {stopSubmit} from \"redux-form\";\r\nimport {BaseThunkType} from \"./redux-store\";\r\nimport {chatAPI, ChatMessageAPIType, StatusChatType} from \"../api/chat-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {v1} from \"uuid\";\r\n\r\n\r\nexport type ChatMessageType = ChatMessageAPIType & {id: string}\r\n\r\nexport type ChatPropsType = {\r\n    messages: ChatMessageType[]\r\n    status: StatusChatType\r\n}\r\n\r\nconst initialState: ChatPropsType = {\r\n    messages: [] as ChatMessageType[],\r\n    status: 'pending' as StatusChatType\r\n}\r\n\r\nexport const chatReducer = (state = initialState, action: ChatActionType): ChatPropsType => {\r\n    switch (action.type) {\r\n        case 'SN/CHAT/MESSAGE-RECEIVED':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, ...action.payload.messages.map(m => ({...m, id: v1()}))]\r\n                    .filter((m, index, array) => index >= array.length - 50)\r\n            }\r\n        case 'SN/CHAT/STATUS-CHANGED':\r\n            return {\r\n                ...state,\r\n                status: action.payload.status,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// ----- Actions -----\r\n\r\nexport const messagesReceivedAC = (messages: ChatMessageAPIType[]) => ({\r\n    type: 'SN/CHAT/MESSAGE-RECEIVED', payload: {messages}\r\n} as const)\r\nexport const statusChangedAC = (status: StatusChatType) => ({\r\n    type: 'SN/CHAT/STATUS-CHANGED', payload: {status}\r\n} as const)\r\n\r\n// ----- Thunk -----\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null;\r\nlet _statusChangedHandler: ((status: StatusChatType) => void) | null = null;\r\n\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_newMessageHandler === null) {\r\n        _newMessageHandler = (messages) => {\r\n            dispatch(messagesReceivedAC(messages))\r\n        }\r\n    }\r\n    return _newMessageHandler\r\n}\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_statusChangedHandler === null) {\r\n        _statusChangedHandler = (status) => {\r\n            dispatch(statusChangedAC(status))\r\n        }\r\n    }\r\n    return _statusChangedHandler\r\n}\r\n\r\nexport const startMessagesListenerTC = (): ThunkType => async (dispatch) => {\r\n    chatAPI.start()\r\n    chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n    chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n}\r\nexport const stopMessagesListenerTC = (): ThunkType => async (dispatch) => {\r\n    chatAPI.unsubscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n    chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n    chatAPI.stop()\r\n}\r\nexport const sendMessagesTC = (message: string): ThunkType => async (dispatch) => {\r\n    chatAPI.sendMessage(message)\r\n}\r\n\r\n// ----- Types -----\r\n\r\nexport type ChatActionType = MessagesReceivedACType | SetStatusACType\r\ntype MessagesReceivedACType = ReturnType<typeof messagesReceivedAC>\r\ntype SetStatusACType = ReturnType<typeof statusChangedAC>\r\ntype ThunkType = BaseThunkType<ChatActionType | ReturnType<typeof stopSubmit>>\r\n\r\n\r\nexport default chatReducer;\r\n\r\n\r\n","import {UsersType} from \"../redux/UsersReducer\";\r\n\r\n\r\nexport function updateObjectArray (users: Array<UsersType>, itemId: string, id: string, newObjProps: {}) {\r\n  return users.map(user => {\r\n    if (user.id === itemId) {\r\n      return {...user, ...newObjProps}\r\n    }\r\n    return user\r\n  })\r\n}","import {Dispatch} from \"redux\";\r\nimport {getUsersAPI, usersAPI} from \"../api/users-api\";\r\nimport {updateObjectArray} from \"../utils/objects-helper\";\r\nimport {BaseThunkType} from \"./redux-store\";\r\nimport {APIDataResponseType} from \"../api/api\";\r\n\r\nexport type UsersType = {\r\n    id: string,\r\n    avatar: string,\r\n    followed: boolean,\r\n    name: string,\r\n    status: string,\r\n    location: LocationUsersType,\r\n    photos: PhotoUsersType\r\n}\r\nexport type LocationUsersType = {\r\n    city: string,\r\n    country: string\r\n}\r\nexport type PhotoUsersType = {\r\n    small: string,\r\n    big: string\r\n}\r\nexport type FilterType = {\r\n    term: string,\r\n    friend: null | boolean\r\n}\r\n\r\nexport type UsersStatePropsType = {\r\n    users: Array<UsersType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: Array<string>,\r\n    filter: FilterType\r\n}\r\n\r\nconst initialState: UsersStatePropsType = {\r\n    users: [] as Array<UsersType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 20,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [],\r\n    filter: {\r\n        term: '',\r\n        friend: null,\r\n    } as FilterType\r\n}\r\n\r\nexport const usersReducer = (state = initialState, action: UsersActionType): UsersStatePropsType => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/FOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: updateObjectArray(state.users, action.userID, \"id\", {followed: true})\r\n            }\r\n        }\r\n        case 'SN/USERS/UNFOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: updateObjectArray(state.users, action.userID, \"id\", {followed: false})\r\n            }\r\n        }\r\n        case 'SN/USERS/SET-USERS': {\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        }\r\n        case 'SN/USERS/SET-CURRENT-PAGE': {\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        }\r\n        case 'SN/USERS/SET-PAGE-SIZE': {\r\n            return {\r\n                ...state,\r\n                pageSize: action.pageSize\r\n            }\r\n        }\r\n        case 'SN/USERS/SET-TOTAL-USERS-COUNT': {\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.count\r\n            }\r\n        }\r\n        case 'SN/USERS/TOGGLE-IS-FETCHING': {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n        case 'SN/USERS/FOLLOWING-IN-PROGRESS': {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userID]\r\n                    : state.followingInProgress.filter(id => id !== action.userID)\r\n            }\r\n        }\r\n        case 'SN/USERS/SET-FILTER': {\r\n            return {\r\n                ...state,\r\n                filter: action.payload,\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// ----- Actions -----\r\n\r\nexport const followSuccessAC = (userID: string): FollowACType => {\r\n    return {type: 'SN/USERS/FOLLOW', userID: userID}\r\n}\r\nexport const unfollowSuccessAC = (userID: string): UnfollowACType => {\r\n    return {type: 'SN/USERS/UNFOLLOW', userID: userID}\r\n}\r\nexport const setUsersAC = (users: Array<UsersType>): SetUsersACType => {\r\n    return {type: 'SN/USERS/SET-USERS', users: users}\r\n}\r\nexport const setCurrentPageAC = (currentPage: number): SetCurrentPageACType => {\r\n    return {type: 'SN/USERS/SET-CURRENT-PAGE', currentPage: currentPage}\r\n}\r\nexport const setPageSizeAC = (pageSize: number): SetPageSizeACType => {\r\n    return {type: 'SN/USERS/SET-PAGE-SIZE', pageSize: pageSize}\r\n}\r\nexport const setUsersTotalCountAC = (count: number): SetUsersTotalCountACType => {\r\n    return {type: 'SN/USERS/SET-TOTAL-USERS-COUNT', count: count}\r\n}\r\nexport const toggleIsFetchingAC = (isFetching: boolean): ToggleIsFetchingType => {\r\n    return {type: 'SN/USERS/TOGGLE-IS-FETCHING', isFetching: isFetching}\r\n}\r\nexport const followingInProgressAC = (isFetching: boolean, userID: string): FollowingInProgressACType => {\r\n    return {type: 'SN/USERS/FOLLOWING-IN-PROGRESS', isFetching, userID}\r\n}\r\nexport const setFilterAC = (filter: FilterType): SetFilterACType => {\r\n    return {type: 'SN/USERS/SET-FILTER', payload: filter}\r\n}\r\n\r\n// ----- Thunk -----\r\n\r\nexport const getUsersTC = (page: number, pageSize: number, filter: FilterType): ThunkType => { // requestUsers у Димыча\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetchingAC(true));\r\n        dispatch(setCurrentPageAC(page));\r\n        dispatch(setPageSizeAC(pageSize));\r\n        dispatch(setFilterAC(filter));\r\n        let data = await getUsersAPI.getUsers(page, pageSize, filter.term, filter.friend);\r\n        dispatch(toggleIsFetchingAC(false));\r\n        dispatch(setUsersAC(data.items));\r\n        dispatch(setUsersTotalCountAC(data.totalCount));\r\n    }\r\n}\r\n\r\nexport const followTC = (userID: string): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userID, usersAPI.follow.bind(usersAPI), followSuccessAC)\r\n    }\r\n}\r\n\r\nexport const unfollowTC = (userID: string): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userID, usersAPI.unfollow.bind(usersAPI), unfollowSuccessAC)\r\n    }\r\n}\r\n\r\n// ----- Helper -----\r\n\r\nconst _followUnfollowFlow =\r\n    async (dispatch: Dispatch<UsersActionType>, userID: string, apiMethod: (userID: string) => Promise<APIDataResponseType>, actionCreator: (userID: string) => FollowACType | UnfollowACType) => {\r\n        dispatch(followingInProgressAC(true, userID));\r\n        let response = await apiMethod(userID);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(actionCreator(userID))\r\n        }\r\n        dispatch(followingInProgressAC(false, userID));\r\n    }\r\n\r\n// ----- Types -----\r\n\r\nexport type UsersActionType = FollowACType | UnfollowACType | SetUsersACType |\r\n                              SetPageSizeACType | SetCurrentPageACType | SetUsersTotalCountACType |\r\n                              ToggleIsFetchingType | FollowingInProgressACType | SetFilterACType\r\ntype ThunkType = BaseThunkType<UsersActionType>\r\n\r\nexport type FollowACType = { type: 'SN/USERS/FOLLOW', userID: string }\r\nexport type UnfollowACType = { type: 'SN/USERS/UNFOLLOW', userID: string }\r\nexport type SetUsersACType = { type: 'SN/USERS/SET-USERS', users: Array<UsersType> }\r\nexport type SetCurrentPageACType = { type: 'SN/USERS/SET-CURRENT-PAGE', currentPage: number }\r\nexport type SetPageSizeACType = { type: 'SN/USERS/SET-PAGE-SIZE', pageSize: number }\r\nexport type SetUsersTotalCountACType = { type: 'SN/USERS/SET-TOTAL-USERS-COUNT', count: number }\r\nexport type ToggleIsFetchingType = { type: 'SN/USERS/TOGGLE-IS-FETCHING', isFetching: boolean }\r\nexport type FollowingInProgressACType = { type: 'SN/USERS/FOLLOWING-IN-PROGRESS', isFetching: boolean, userID: string }\r\nexport type SetFilterACType = { type: 'SN/USERS/SET-FILTER', payload: FilterType }","import {PhotosUserProfileType, ProfileType} from \"../redux/ProfileReducer\";\r\nimport {instance, APIResponseType} from \"./api\";\r\n\r\nexport const profileAPI = {\r\n  getProfile(id: string) {\r\n    return instance.get<ProfileType>(`profile/` + id);\r\n  },\r\n  getStatus(id: string) {\r\n    return instance.get<string>(`profile/status/` + id);\r\n  },\r\n  updateStatus(status: string) {\r\n    return instance.put<APIResponseType>(`profile/status`, {status: status} );\r\n  },\r\n  savePhoto(photoFile: string) {\r\n    const formData = new FormData();\r\n    formData.append(\"image\", photoFile);\r\n    return instance.put<APIResponseType<SavePhotoResponseType>>(`profile/photo`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    });\r\n  },\r\n  saveProfile(profile: ProfileType) {\r\n    return instance.put<APIResponseType>(`profile`, profile);\r\n  }\r\n}\r\n\r\ntype SavePhotoResponseType = {\r\n  photos: PhotosUserProfileType\r\n}","import {v1} from \"uuid\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\nimport {BaseThunkType} from \"./redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\n\r\nexport type NetworkDataType = {\r\n    logo: string,\r\n    background: string,\r\n    navBar: string\r\n}\r\nexport type ProfileInfoDataType = {\r\n    content: string,\r\n    backgroundImg: string\r\n}\r\nexport type MyPostsType = {\r\n    id: string,\r\n    avatar: string,\r\n    message: string,\r\n    amount: number\r\n}\r\nexport type ContactsUserProfileType = {\r\n    facebook?: null | string,\r\n    website?: null | string,\r\n    vk?: null | string,\r\n    twitter?: null | string,\r\n    instagram?: null | string,\r\n    youtube?: null | string,\r\n    github?: null | string,\r\n    mainLink?: null | string,\r\n}\r\nexport type PhotosUserProfileType = {\r\n    small: string,\r\n    large: string\r\n}\r\nexport type ProfileType = {\r\n    aboutMe: string,\r\n    contacts: { [key: string]: string },\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    userId: string,\r\n    photos: PhotosUserProfileType\r\n}\r\nexport type ProfilePageType = {\r\n    newMessage: string,\r\n    networkData: NetworkDataType,\r\n    profileInfoData: ProfileInfoDataType,\r\n    arrayMyPosts: Array<MyPostsType>,\r\n    profile: ProfileType,\r\n    isFetching: boolean,\r\n    status: string\r\n}\r\n\r\nconst initialState: ProfilePageType = {\r\n    newMessage: 'BlaBlaBla',\r\n    networkData: {\r\n        logo: \"https://cdn.clipart.email/99a9bc01980d179473c824e6ded69513_download-guild-wars-2-logo-png-jpg-stock-guild-wars-2-cd-key-_1697-1751.png\",\r\n        background: \"https://junior3d.ru/texture/%D0%9F%D0%B0%D0%BD%D0%BE%D1%80%D0%B0%D0%BC%D0%B0/%D0%9F%D0%B0%D0%BD%D0%BE%D1%80%D0%B0%D0%BC%D1%8B%D0%9B%D0%B0%D0%BD%D0%B4%D1%88%D0%B0%D1%84%D1%82%D0%B0/%D0%BF%D0%B0%D0%BD%D0%BE%D1%80%D0%B0%D0%BC%D1%8B-%D0%BB%D0%B0%D0%BD%D0%B4%D1%88%D0%B0%D1%84%D1%82%D0%B0_62.jpg\",\r\n        navBar: \"\"\r\n    } as NetworkDataType,\r\n    profileInfoData: {\r\n        content: \"Ava + Description\",\r\n        backgroundImg: \"https://junior3d.ru/texture/%D0%9F%D0%B0%D0%BD%D0%BE%D1%80%D0%B0%D0%BC%D0%B0/%D0%9F%D0%B0%D0%BD%D0%BE%D1%80%D0%B0%D0%BC%D1%8B%D0%9B%D0%B0%D0%BD%D0%B4%D1%88%D0%B0%D1%84%D1%82%D0%B0/%D0%BF%D0%B0%D0%BD%D0%BE%D1%80%D0%B0%D0%BC%D1%8B-%D0%BB%D0%B0%D0%BD%D0%B4%D1%88%D0%B0%D1%84%D1%82%D0%B0_62.jpg\",\r\n    } as ProfileInfoDataType,\r\n    arrayMyPosts: [\r\n        {\r\n            id: v1(),\r\n            avatar: \"https://www.anypics.ru/download.php?file=201210/1440x900/anypics.ru-5910.jpg\",\r\n            message: \"Hi\",\r\n            amount: 5\r\n        },\r\n        {\r\n            id: v1(),\r\n            avatar: \"https://www.anypics.ru/download.php?file=201210/1440x900/anypics.ru-5910.jpg\",\r\n            message: \"How are you?\",\r\n            amount: 3\r\n        },\r\n        {\r\n            id: v1(),\r\n            avatar: \"https://www.anypics.ru/download.php?file=201210/1440x900/anypics.ru-5910.jpg\",\r\n            message: \"Fine\",\r\n            amount: 4\r\n        },\r\n    ] as Array<MyPostsType>,\r\n    profile: {} as ProfileType,\r\n    isFetching: true,\r\n    status: \"\",\r\n}\r\n\r\n// = ReturnType<typeof addPostAC> но тогда\r\n// в функции не надо указывать тип,\r\n// который он возвращает\r\n\r\nexport const profileReducer = (state = initialState, action: ProfileActionType): ProfilePageType => {\r\n    switch (action.type) {\r\n        case 'SN/PROFILE/ADD-POST': {\r\n            return {\r\n                ...state,\r\n                arrayMyPosts: [{id: v1(), avatar: \"\", message: action.message, amount: 0}, ...state.arrayMyPosts],\r\n                newMessage: \"\",\r\n            };\r\n        }\r\n        case 'SN/PROFILE/DELETE-POST': {\r\n            return {\r\n                ...state,\r\n                arrayMyPosts: state.arrayMyPosts.filter(p => p.id !== action.id)\r\n            };\r\n        }\r\n        case 'SN/PROFILE/UPDATE-NEW-MESSAGE': {\r\n            return {\r\n                ...state,\r\n                newMessage: action.newMessage\r\n            };\r\n        }\r\n        case 'SN/PROFILE/SET-USER-PROFILE': {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case 'SN/PROFILE/USER-IS-FETCHING': { // у Димыча этой функции нет\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n        case 'SN/PROFILE/SET-STATUS': {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case 'SN/PROFILE/SET-SAVE-PHOTO': {\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos}\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// ----- Actions -----\r\n\r\nexport const addPostAC = (message: string): AddPostType => {\r\n    return {type: 'SN/PROFILE/ADD-POST', message: message} as const\r\n}\r\nexport const deletePostAC = (id: string): DeletePostType => {\r\n    return {type: 'SN/PROFILE/DELETE-POST', id: id} as const\r\n}\r\nexport const updateNewPostTextAC = (message: string): UpdateNewPostTextActionCreatorType => {\r\n    return {type: 'SN/PROFILE/UPDATE-NEW-MESSAGE', newMessage: message} as const\r\n}\r\nexport const setUserProfileAC = (profile: ProfileType): UserProfile => {\r\n    return {type: 'SN/PROFILE/SET-USER-PROFILE', profile: profile} as const\r\n}\r\nexport const userIsFetchingAC = (isFetching: boolean): UserIsFetching => {\r\n    return {type: 'SN/PROFILE/USER-IS-FETCHING', isFetching: isFetching} as const\r\n}\r\nexport const setStatusAC = (status: string): SetStatusType => {\r\n    return {type: 'SN/PROFILE/SET-STATUS', status: status} as const\r\n}\r\nexport const setSavePhotoAC = (photos: PhotosUserProfileType): SetSavePhoto => {\r\n    return {type: 'SN/PROFILE/SET-SAVE-PHOTO', photos: photos} as const\r\n}\r\n\r\n// ----- Thunk -----\r\n\r\nexport const getUserProfileTC = (userId: string): ThunkType => async (dispatch) => {\r\n    let response = await profileAPI.getProfile(userId);\r\n    dispatch(setUserProfileAC(response.data));\r\n    dispatch(userIsFetchingAC(false)); //можно удалить)\r\n}\r\nexport const setStatusTC = (userId: string): ThunkType => async (dispatch) => {\r\n    let response = await profileAPI.getStatus(userId);\r\n    dispatch(setStatusAC(response.data));\r\n}\r\nexport const updateStatusTC = (status: string): ThunkType => async (dispatch) => {\r\n    let response = await profileAPI.updateStatus(status);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatusAC(status));\r\n        dispatch(userIsFetchingAC(false)); //можно удалить)\r\n    }\r\n}\r\nexport const savePhotoTC = (file: string): ThunkType => async (dispatch) => {\r\n    let response = await profileAPI.savePhoto(file);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setSavePhotoAC(response.data.data.photos));\r\n    }\r\n}\r\nexport const saveProfileTC = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.id.toString()\r\n    let response = await profileAPI.saveProfile(profile);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setUserProfileAC(profile))\r\n        await dispatch(getUserProfileTC(userId))\r\n    } else {\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit('error', {_error: message})); // через специальную форму 'error'\r\n        return Promise.reject(message)\r\n        //dispatch(stopSubmit('edit-profile', {\"contacts\": {\"facebook\": response.data.messages[0]}})); // ошибка будет под определенной текстерией\r\n        //alert(response.data.messages[0])\r\n    }\r\n}\r\n\r\n// ----- Types -----\r\n\r\nexport type ProfileActionType = AddPostType | DeletePostType | UpdateNewPostTextActionCreatorType |\r\n                                UserProfile | UserIsFetching | SetStatusType |\r\n                                SetSavePhoto\r\ntype ThunkType = BaseThunkType<ProfileActionType | ReturnType<typeof stopSubmit>>\r\n\r\nexport type AddPostType = { type: 'SN/PROFILE/ADD-POST', message: string }\r\nexport type DeletePostType = { type: 'SN/PROFILE/DELETE-POST', id: string }\r\nexport type UpdateNewPostTextActionCreatorType = { type: 'SN/PROFILE/UPDATE-NEW-MESSAGE', newMessage: string }\r\nexport type UserProfile = { type: 'SN/PROFILE/SET-USER-PROFILE', profile: ProfileType }\r\nexport type UserIsFetching = { type: 'SN/PROFILE/USER-IS-FETCHING', isFetching: boolean }\r\nexport type SetStatusType = { type: 'SN/PROFILE/SET-STATUS', status: string }\r\nexport type SetSavePhoto = { type: 'SN/PROFILE/SET-SAVE-PHOTO', photos: PhotosUserProfileType }\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {v1} from \"uuid\";\r\n\r\nexport type FriendsType = {\r\n    id: string,\r\n    avatar: string,\r\n    name: string\r\n}\r\n\r\nexport type FriendsPropsType = {\r\n    friends: Array<FriendsType>\r\n}\r\n\r\nconst initialState: FriendsPropsType = {\r\n    friends: [\r\n        {\r\n            id: v1(),\r\n            avatar: \"https://img1.goodfon.ru/original/1920x1172/4/bc/kunfu-panda-2-multfilm.jpg\",\r\n            name: \"Viktor\"\r\n        },\r\n        {\r\n            id: v1(),\r\n            avatar: \"https://shutniki.club/wp-content/uploads/2020/01/smeshnye_avatarki_34_17105705.jpg\",\r\n            name: \"Dima\"\r\n        },\r\n        {\r\n            id: v1(),\r\n            avatar: \"https://yandex-images.naydex.net/NQvb96385/bc04c3hdhXu/Kn883ud1u_Wg6V0qj0LyZMf8dwOfqlxQUQSKy_15QB2k4uyiTudpD3tUVNbbHlCyGLUcwTFPtfhoKG8yYiZFau59uw1n5PsxtDgNdtlC4_cUqaBCS-0bxoWUTR48fUbacTQ1Nt7jehttAw9Xml5XedI921z_kTknNLfxNGMwketoui-LaP_ruyAhnHxIwfR9QLewyZotA12aABNLOPLZ26klqafNrnnYKE5MwsJJiveZNNPVvFP0rvY7-ngvMRbpKu1rwSy0vzAi7tMzQgAz9ck08sreb8xVWMXSzHl-UlNnqyKpzmJ5WGyCBspHSUd-Xr0RHjrZPyv997_7ZvrYY67q5ABmubPwaSNau4WNsDRKPj7DUmeEU1PDEAP-OlJfZechZwjisBeoS8qPBgeJ9dw-3ZH7V3PvPjO2u-r9HSDjLaxBKzwwO-EkGjeNgX75A_xyj9wphxWWxVPPdHlWXiHtoqnGbbMY6gNJhkWDivWZd9Bc-hD-rLgxPnijvROuriIuSWqxtrXqZN_xxYKwMcW4uIueJUPWFsjazDV-H1BjqqmgB-M8l6eDSUOPjw63m7SWn_mQtOtwNzBwJTdRY-OtKgysMTFwKeeT9MhHv_LD8L1LUyaO0BpAEkZwfVmWJeTpbUAqM9Ajj47CC09HNFB72Fc5EHym-f66P6g5VKPnaqfPobW2ceNuGP9ARX72D7fxRlyqQlBYi5tD8LGT0Oxg4asJbjkeb4oLD8_Lx_zTvxOeuNu1ZTP-s3ShM1xh5SnrxKI6c3TjJBO5icd0sch0eglU5M-flUQTAnG00tGjImLpyS4-EmPKDE5IiwD0njyXGPHXeCk1Prk-6ToVZi2v40HsvL406W5cOEeJfjJKPTHLH-6J3ZSDU4j-ftZQ7uHtK4lk_hKqT8KFzMTD8lv8U96z2DkodfbyeKZ61SFvr-oNo_RwMGypm_mIw718S7x8AxIujdeahJJL8U\",\r\n            name: \"Katerina\"\r\n        },\r\n    ] as Array<FriendsType>\r\n}\r\n\r\nexport const friendReducer = (state = initialState, action: any): FriendsPropsType => {\r\n    return state;\r\n}\r\n\r\n","import {instance, APIResponseType, ResultCodeForCaptchaEnum, ResultCodesEnum} from \"./api\";\r\n\r\n\r\nexport const authAPI = {\r\n  me() {\r\n    return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`)\r\n  },\r\n  login(email: string, password: string, rememberMe = false, captcha: string | null = null) {\r\n    return instance.post<APIResponseType<LoginResponseDataType, ResultCodeForCaptchaEnum | ResultCodesEnum>>(`auth/login`, { email, password, rememberMe, captcha })\r\n  },\r\n  logout() {\r\n    return instance.delete<APIResponseType>(`auth/login`)\r\n  }\r\n}\r\n\r\n\r\ntype MeResponseDataType = {\r\n  id: number\r\n  email: string\r\n  login: string\r\n}\r\ntype LoginResponseDataType = {\r\n  userId: number\r\n}","import {instance} from \"./api\";\r\n\r\n\r\nexport const securityAPI = {\r\n  getCaptchaUrl() {\r\n    return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`)\r\n  }\r\n}\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n  url: string\r\n}","import {ResultCodeForCaptchaEnum, ResultCodesEnum} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {securityAPI} from \"../api/security-api\";\r\nimport {BaseThunkType} from \"./redux-store\";\r\n\r\ntype DataType = {\r\n  id: number,\r\n  login: string,\r\n  email: string,\r\n  isAuth: boolean,\r\n}\r\n\r\nexport type AuthPropsType = {\r\n  id: number,\r\n  login: string,\r\n  email: string,\r\n  isAuth: boolean,\r\n  captchaUrl: string | null\r\n}\r\n\r\nconst initialState: AuthPropsType = {\r\n    id: 1,\r\n    login: '2',\r\n    email: '3',\r\n    isAuth: false,\r\n    captchaUrl: null\r\n}\r\n\r\nexport const authReducer = (state = initialState, action: AuthActionType): AuthPropsType => {\r\n  switch (action.type) {\r\n    case 'SN/AUTH/SET-AUTH-USER-DATA': {\r\n      return {\r\n        ...state,\r\n        ...action.data,\r\n      }\r\n    }\r\n    case 'SN/AUTH/GET-CAPTCHA-URL': {\r\n      return {\r\n        ...state,\r\n        captchaUrl: action.captchaUrl\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// ----- Actions -----\r\n\r\nexport const setAuthUserDataAC = (id: number, email: string, login: string, isAuth: boolean): SetUserDataACType => {\r\n  return {\r\n    type: 'SN/AUTH/SET-AUTH-USER-DATA', data: {id, email, login, isAuth }\r\n  } as const\r\n}\r\nexport const getCaptchaUrlAC = (captchaUrl: string): GetCaptchaUrlACType => {\r\n  return {\r\n    type: 'SN/AUTH/GET-CAPTCHA-URL', captchaUrl\r\n  } as const\r\n}\r\n\r\n// ----- Thunk -----\r\n\r\nexport const getAuthUserDataTC = (): ThunkType => async (dispatch) => {\r\n  let response = await authAPI.me();\r\n  if (response.data.resultCode === ResultCodesEnum.Success) {\r\n    let {id, email, login} = response.data.data\r\n    dispatch(setAuthUserDataAC(id, email, login, true));\r\n  }\r\n}\r\n\r\nexport const loginTC = (email: string, password: string, rememberMe: boolean, captchaUrl: string | null): ThunkType => async (dispatch) => {\r\n  let response = await authAPI.login(email, password, rememberMe, captchaUrl);\r\n  if (response.data.resultCode === ResultCodesEnum.Success) {\r\n    await dispatch(getAuthUserDataTC())\r\n  } else {\r\n    if (response.data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n      await dispatch(getCaptchaUrlTC())\r\n    }\r\n    let messages = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n    dispatch(stopSubmit('login', {_error: messages}));\r\n  }\r\n}\r\n\r\nexport const getCaptchaUrlTC = (): ThunkType => async (dispatch) => {\r\n  let response = await securityAPI.getCaptchaUrl();\r\n  const captchaUrl = response.data.url;\r\n  dispatch(getCaptchaUrlAC(captchaUrl));\r\n}\r\n\r\nexport const logoutTC = (): ThunkType => async (dispatch) => {\r\n  let response = await authAPI.logout();\r\n  if (response.data.resultCode === ResultCodesEnum.Success) {\r\n    dispatch(setAuthUserDataAC(NaN, '', '', false))\r\n  }\r\n}\r\n\r\n// ----- Types -----\r\n\r\nexport type AuthActionType = SetUserDataACType | GetCaptchaUrlACType\r\ntype ThunkType = BaseThunkType<AuthActionType | ReturnType<typeof stopSubmit>>\r\n\r\nexport type SetUserDataACType = { type: 'SN/AUTH/SET-AUTH-USER-DATA', data: DataType }\r\nexport type GetCaptchaUrlACType = { type: 'SN/AUTH/GET-CAPTCHA-URL', captchaUrl: string }\r\n\r\nexport default authReducer;\r\n\r\n\r\n","import {getAuthUserDataTC} from './AuthReducer'\r\nimport {BaseThunkType} from \"./redux-store\";\r\n\r\ntype AppPropsType = {\r\n    initialized: boolean\r\n}\r\n\r\nconst initialState: AppPropsType = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReducer = (state = initialState, action: AppActionType): AppPropsType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED-SUCCESS': {\r\n            return {\r\n                ...state,\r\n                initialized: action.initialized,\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// ----- Actions -----\r\n\r\nexport const initializedSuccessAC = (initialized: boolean) => {\r\n    return {\r\n        type: 'SN/APP/INITIALIZED-SUCCESS', initialized\r\n    } as const\r\n}\r\n\r\n// ----- Thunk -----\r\n\r\nexport const initializeAppTC = (): ThunkType => async (dispatch) => {\r\n    let promise = dispatch(getAuthUserDataTC())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccessAC(true))\r\n        })\r\n        .catch((error) => {\r\n                console.error(error.message)\r\n            }\r\n        )\r\n}\r\n\r\n// ----- Types -----\r\n\r\nexport type AppActionType = ReturnType<typeof initializedSuccessAC>\r\ntype ThunkType = BaseThunkType<AppActionType>\r\n\r\n","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk';\r\nimport {profileReducer} from \"./ProfileReducer\";\r\nimport {friendReducer} from \"./FriendsReducer\";\r\nimport {dialogsReducer} from \"./DialogsReducer\";\r\nimport {usersReducer} from \"./UsersReducer\";\r\nimport {authReducer} from \"./AuthReducer\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport {appReducer} from \"./AppReducer\";\r\nimport chatReducer from \"./ChatReducer\";\r\n\r\n\r\nexport const rootReducer = combineReducers ({\r\n  profilePage: profileReducer,\r\n  dialogPage: dialogsReducer,\r\n  friendPage: friendReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  form: formReducer,\r\n  app: appReducer,\r\n  chat: chatReducer\r\n});\r\n\r\nexport type RootReducerType = typeof rootReducer\r\nexport type StoreStateType = ReturnType<RootReducerType>\r\n\r\n// типизация для actions\r\nexport type InferActionsType<T> = T extends { [key: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, StoreStateType, unknown, A>\r\n\r\nexport type ForCreateFieldPropertiesType<T> = Extract<keyof T, string>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(\r\n  applyMiddleware(thunkMiddleware)\r\n));\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\r\nimport s from './nav.module.css';\r\n\r\ntype NavBarType = {\r\n  name: string\r\n}\r\n\r\nconst NavBar = (props: NavBarType) => {\r\n\r\n  return <div className={s.item}>\r\n    {props.name}\r\n  </div>\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\n\r\nconst Preloader = () => {\r\n   return <span>\r\n       Loading...\r\n  </span>\r\n}\r\n\r\nexport default Preloader;","import React, {ChangeEvent, KeyboardEvent, useEffect, useState} from \"react\";\r\nimport s from \"./Paginator.module.css\"\r\nimport cn from \"classnames\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getUsersTC, setCurrentPageAC} from \"../../../redux/UsersReducer\";\r\nimport {StoreStateType} from \"../../../redux/redux-store\";\r\n\r\n\r\ntype PaginatorPropsType = {\r\n    portionSize: number,\r\n    onPageChanged: (selectedPage: number) => void\r\n}\r\n\r\nconst Paginator = ({onPageChanged}: PaginatorPropsType) => {\r\n    let dispatch = useDispatch()\r\n    const {totalUsersCount, pageSize, currentPage, filter} = useSelector((state: StoreStateType) => state.usersPage)\r\n    useEffect(() => {\r\n        dispatch(getUsersTC(currentPage, pageSize, filter))\r\n    }, [dispatch, currentPage, pageSize, filter])\r\n\r\n    let [value, setValue] = useState(() => '')\r\n\r\n    let currentValue = +value\r\n\r\n    const pagesCount = Math.ceil(totalUsersCount / pageSize) // число всего / число отобр на странице = кол-во страниц\r\n    const pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        Number(setValue(e.currentTarget.value))\r\n    }\r\n    const onClickButtonGo = () => {\r\n        onPageChanged(currentValue)\r\n        dispatch(setCurrentPageAC(currentValue))\r\n        setValue('')\r\n    }\r\n\r\n    const onClickPageChanged = (p: number) => {\r\n        onPageChanged(p)\r\n        dispatch(setCurrentPageAC(p))\r\n    }\r\n    const onChangeSliderPage = () => {\r\n        onPageChanged(currentPage)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            onPageChanged(currentValue)\r\n            dispatch(setCurrentPageAC(currentValue))\r\n            setValue('')\r\n        }\r\n    }\r\n    const endPages = pages\r\n        .filter(p => p >= pages.length)\r\n        .map((p, index) => <ShowButton currentPage={currentPage} page={p} onPageChanged={onClickPageChanged}\r\n                                       key={index}/>\r\n        )\r\n    const startPages = pages\r\n        .filter(p => p <= 1)\r\n        .map((p, index) => <ShowButton currentPage={currentPage} page={p} onPageChanged={onClickPageChanged}\r\n                                       key={index}/>)\r\n\r\n    return <div className={`offset-s-t`}>\r\n        <div>\r\n            <div className={`row left gap-offset`}>\r\n                <input value={value} onChange={onChange} onKeyPress={onKeyPressHandler} placeholder={'enter page'}/>\r\n                <button onClick={onClickButtonGo}> go</button>\r\n            </div>\r\n            <p> Число пользователей: {totalUsersCount}</p>\r\n            <div className=\"row\">\r\n                {currentPage > 1 &&\r\n                <button onClick={() => onClickPageChanged(currentPage - 1)}> prev </button>}\r\n                {currentPage > 2 && startPages}\r\n                {currentPage > 2 && <span> ... </span>}\r\n\r\n                {pages.filter(p => p >= currentPage - 1 && p <= currentPage + 1).map((p, index) => <ShowButton\r\n                    currentPage={currentPage} page={p} onPageChanged={onClickPageChanged} key={index}/>)}\r\n\r\n                {currentPage < (pagesCount - 1) && <span> ... </span>}\r\n                {currentPage < (pagesCount - 1) && endPages}\r\n                {currentPage < pagesCount &&\r\n                <button onClick={() => onClickPageChanged(currentPage + 1)}> next </button>}\r\n            </div>\r\n            <div className=\"row\">\r\n                <input type=\"range\" id=\"range\" value={currentPage} step={1}\r\n                       onChange={e => dispatch(setCurrentPageAC(Number(e.currentTarget.value)))}\r\n                       onClick={onChangeSliderPage} min={1} max={pagesCount} className={s.range}/>\r\n            </div>\r\n            <div>\r\n                <h1> {'Page: ' + currentPage} </h1>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Paginator;\r\n\r\ntype ShowButtonPropsType = {\r\n    currentPage: number,\r\n    page: number,\r\n    onPageChanged: (currentPage: number) => void\r\n}\r\n\r\nconst ShowButton = ({currentPage, page, onPageChanged}: ShowButtonPropsType) => {\r\n    return <button className={cn({[s.selectedPage]: currentPage === page}, s.page)}\r\n                   key={page}\r\n                   onClick={() => {\r\n                       onPageChanged(page)\r\n                   }}> {page} </button>\r\n}","import {Formik, Field} from \"formik\";\r\nimport React from \"react\";\r\nimport {FilterType} from \"../../redux/UsersReducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {StoreStateType} from \"../../redux/redux-store\";\r\n\r\ntype SearchFormPropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\ntype FriendFormType = 'null' | 'true' | 'false'\r\nexport type FormType = {\r\n    term: string,\r\n    friend: FriendFormType\r\n}\r\n\r\nexport const SearchForm = React.memo(({onFilterChanged}: SearchFormPropsType) => {\r\n    const filter = useSelector<StoreStateType, FilterType>(state => state.usersPage.filter)\r\n    const searchFormValidate = (values: any) => {\r\n        const errors = {};\r\n        return errors;\r\n    }\r\n    const onSubmit = (values: FormType) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend === 'true'\r\n        }\r\n        onFilterChanged(filter)\r\n    }\r\n    return <>\r\n        <div>\r\n            <h2> Filters </h2>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n                validate={searchFormValidate}\r\n                onSubmit={onSubmit}\r\n            >\r\n                {({\r\n                      values,\r\n                      handleChange,\r\n                      handleBlur,\r\n                      handleSubmit\r\n                  }) => (\r\n                    <form onSubmit={handleSubmit} className={`row left gap-offset`}>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"term\"\r\n                            placeholder=\"find users\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.term}\r\n                        />\r\n                        <Field name=\"friend\" as=\"select\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only followed</option>\r\n                            <option value=\"false\">Only unfollowed</option>\r\n                        </Field>\r\n                        <button type=\"submit\">\r\n                            Find\r\n                        </button>\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    </>\r\n})","import React from \"react\";\r\nimport {getUsersTC} from \"../../../redux/UsersReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StoreStateType} from \"../../../redux/redux-store\";\r\n\r\n\r\nconst Select = () => {\r\n\r\n  const pageSize = useSelector<StoreStateType, number>(state => state.usersPage.pageSize)\r\n  const currentPage = useSelector<StoreStateType, number>(state => state.usersPage.currentPage)\r\n  const term = useSelector<StoreStateType, string>(state => state.usersPage.filter.term)\r\n\r\n  let dispatch = useDispatch()\r\n\r\n  const onChangePageSize = (p: number) => {\r\n    dispatch(getUsersTC(currentPage, p, {term: term, friend: null}))\r\n  }\r\n\r\n  return <div>\r\n    <select value={pageSize} onChange={e => onChangePageSize(Number(e.currentTarget.value))}>\r\n      <option value={1}>1</option>\r\n      <option value={2}>2</option>\r\n      <option value={5}>5</option>\r\n      <option value={10}>10</option>\r\n      <option value={20}>20</option>\r\n    </select>\r\n  </div>\r\n}\r\n\r\nexport default Select;\r\n","import React, {useEffect} from \"react\";\r\nimport s from \"./users.module.css\"\r\nimport {FilterType, getUsersTC} from \"../../redux/UsersReducer\";\r\nimport Paginator from \"../common/paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport {SearchForm} from \"../common/SearchForm\";\r\nimport Select from \"../common/paginator/Select\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StoreStateType} from \"../../redux/redux-store\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport * as queryString from \"querystring\";\r\nimport {startDialogAC} from \"../../redux/DialogsReducer\";\r\n\r\n\r\ntype QueryParamsType = {\r\n    term?: string,\r\n    friend?: string,\r\n    page?: string,\r\n    pageSize?: string\r\n}\r\nexport const Users = () => {\r\n    let dispatch = useDispatch()\r\n\r\n    const {\r\n        pageSize, currentPage,\r\n        followingInProgress, users, filter\r\n    } = useSelector((state: StoreStateType) => state.usersPage)\r\n    const {page, count} = useSelector((state: StoreStateType) => state.dialogPage)\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {}\r\n        if (!!filter.term) query.term = filter.term\r\n        if (filter.friend !== null) query.friend = String(filter.friend)\r\n        if (currentPage !== 1) query.page = String(currentPage)\r\n        if (pageSize !== 10) query.pageSize = String(pageSize)\r\n\r\n        history.push({\r\n            pathname: '/users',\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage, pageSize, history])\r\n\r\n    const onPageChanged = (currentPage: number) => {\r\n        dispatch(getUsersTC(currentPage, pageSize, filter));\r\n    }\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(getUsersTC(1, pageSize, filter))\r\n    }\r\n\r\n    const startDialog = () => {\r\n        dispatch(startDialogAC(true))\r\n    }\r\n\r\n    return <div className={`col`}>\r\n        <Select/>\r\n        <SearchForm onFilterChanged={onFilterChanged}/>\r\n        <Paginator portionSize={10}\r\n                   onPageChanged={onPageChanged}/>\r\n        <div className={`row left padding-s-tb ${s.users}`}>\r\n            {users.map((u, index) => <div>\r\n                    <User user={u} key={`user-${index}`} followingInProgress={followingInProgress}\r\n                          startDialog={startDialog} page={page} count={count} navLink={'/profile/'}/>\r\n                </div>\r\n            )}\r\n        </div>\r\n    </div>\r\n}","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {StoreStateType} from \"../../redux/redux-store\";\r\nimport Preloader from \"../common/Preloader\";\r\nimport {Users} from \"./Users\";\r\nimport useGaTracker from \"../../useGaTracker\";\r\n\r\nexport const UsersPageComponent = () => {\r\n    useGaTracker()\r\n    const isFetching = useSelector<StoreStateType, boolean>(state => state.usersPage.isFetching)\r\n\r\n    return <>\r\n        <div className={`${!isFetching && 'transparent'}`}>\r\n            <Preloader/>\r\n        </div>\r\n        <Users/>\r\n    </>\r\n}","import React, {ComponentType} from \"react\";\r\nimport Preloader from \"../components/common/Preloader\";\r\n\r\n\r\nexport function withSuspense<T>(Component: ComponentType<T>) {\r\n  return (props: T) => {\r\n    return <React.Suspense fallback={<Preloader/>}> <Component {...props}/> </React.Suspense>\r\n  }\r\n}\r\n\r\n","import React from \"react\"\r\nimport s from \"./FormsControls.module.css\"\r\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\"\r\n\r\ntype MetaType = {\r\n  meta: WrappedFieldMetaProps\r\n}\r\n\r\n\r\nexport const TextareaFormsController: React.FC<WrappedFieldProps> = (props) => {\r\n  const {input, meta, children, ...restProps} = props;\r\n  return <FormsController {...props}><textarea {...props.input} {...restProps}/></FormsController>\r\n}\r\nexport const InputFormsController: React.FC<WrappedFieldProps> = (props) => {\r\n  const {input, meta, children, ...restProps} = props;\r\n  return <FormsController {...props}><input {...props.input} {...restProps}/></FormsController>\r\n}\r\n\r\nconst FormsController: React.FC<MetaType> = (\r\n  {\r\n    meta: {touched, error}, children\r\n  }) => {\r\n  const hasError = touched && error\r\n  return (\r\n    <div className={s.formControl + \" \" + (hasError ? s.error : '')}>\r\n      <div>\r\n        {children}\r\n      </div>\r\n      {hasError && <span> {error} </span>}\r\n    </div>\r\n  )\r\n}\r\n\r\n","export type FieldValidatorType = (value: string) => string | undefined;\r\n\r\nexport const required: FieldValidatorType = (value: string) => {\r\n  if (value) return undefined\r\n  return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value: string) => {\r\n  if (value && value.length > maxLength) return `Max length is ${maxLength} simbols`\r\n  return undefined\r\n}\r\n","import {FieldValidatorType} from \"./validators/validators\";\r\nimport React, {FC} from \"react\";\r\nimport {Field, WrappedFieldProps} from \"redux-form\";\r\n\r\n\r\nexport function createField<T extends string>(placeholder: string | number | undefined,\r\n                                              name: T,\r\n                                              validators: Array<FieldValidatorType>,\r\n                                              component: FC<WrappedFieldProps>,\r\n                                              props = {},\r\n                                              text = '') {\r\n    return <>\r\n        <Field placeholder={placeholder} name={name} validate={validators} component={component} {...props}/> {text}\r\n    </>\r\n}","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {InputFormsController} from \"../common/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {FormLoginDataType} from \"./Login\";\r\nimport s from \"./../common/FormsControls.module.css\"\r\nimport {useSelector} from \"react-redux\";\r\nimport {ForCreateFieldPropertiesType, StoreStateType} from \"../../redux/redux-store\";\r\nimport {createField} from \"../../utils/createField\";\r\n\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormLoginDataType>> = ({handleSubmit, error}) => {\r\n    const captchaUrl = useSelector<StoreStateType, string | null>(state => state.auth.captchaUrl)\r\n    return <>\r\n        <form onSubmit={handleSubmit}>\r\n            <div className={`padding-s-tb`}>\r\n                {createField<ForCreateFieldPropertiesType<FormLoginDataType>>(\"Email\", \"email\", [required], InputFormsController)}\r\n            </div>\r\n            <div>\r\n                {createField<ForCreateFieldPropertiesType<FormLoginDataType>>(\"password\", \"password\", [required], InputFormsController, {type: \"password\"})}\r\n            </div>\r\n            <div>\r\n                {createField<ForCreateFieldPropertiesType<FormLoginDataType>>(\"\", \"rememberMe\", [], InputFormsController, {type: \"checkbox\"}, 'remember me')}\r\n            </div>\r\n            {captchaUrl && <img src={captchaUrl} alt={'captcha'}/>}\r\n            {captchaUrl && createField<ForCreateFieldPropertiesType<FormLoginDataType>>(\"Symbols from image\", \"captchaUrl\", [required], InputFormsController)}\r\n            {error && <div className={s.formSummaryError}> {error} </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    </>\r\n}\r\n\r\nexport const LoginReduxForm = reduxForm<FormLoginDataType>({\r\n    form: 'login'\r\n})(LoginForm)","import React from 'react';\r\nimport {LoginReduxForm} from \"./LoginReduxForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"../../redux/AuthReducer\";\r\nimport {StoreStateType} from \"../../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport useGaTracker from \"../../useGaTracker\";\r\n\r\nexport type FormLoginDataType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n  captchaUrl: string | null\r\n}\r\n\r\nexport const Login = () => {\r\n  useGaTracker()\r\n  const dispatch = useDispatch()\r\n  const isAuth = useSelector<StoreStateType, boolean>(state => state.auth.isAuth)\r\n  const onSubmit = ({email, password, rememberMe, captchaUrl}: FormLoginDataType) => {\r\n    dispatch(loginTC(email, password, rememberMe, captchaUrl))\r\n  }\r\n\r\n  if (isAuth) {\r\n    return <Redirect to={\"/profile\"} />\r\n  }\r\n\r\n  return <> <div>\r\n    <h1> Login </h1>\r\n    <LoginReduxForm onSubmit={onSubmit}/>\r\n    <p>email: galiale@bk.ru</p>\r\n    <p>password: 123456789</p>\r\n  </div>\r\n  </>\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {StoreStateType} from \"../../../redux/redux-store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getUserProfileTC, updateStatusTC} from \"../../../redux/ProfileReducer\";\r\n\r\n\r\nconst ProfileStatusWithHooks = () => {\r\n    let dispatch = useDispatch();\r\n    let statusUser = useSelector<StoreStateType, string>(state => state.profilePage.status)\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(statusUser);\r\n\r\n    useEffect(() => {\r\n        dispatch(getUserProfileTC)\r\n        setStatus(statusUser)\r\n    }, [statusUser, dispatch])\r\n\r\n    let activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    let deactivateEditMode = (status: string) => {\r\n        setEditMode(false);\r\n        dispatch(updateStatusTC(status))\r\n    }\r\n    let onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return <div>\r\n        {!editMode &&\r\n        <div className={`border-b padding-s-tb`}>\r\n          <h2>Status:</h2> <span onDoubleClick={activateEditMode}> {statusUser || \"No status\"} </span>\r\n        </div>}\r\n\r\n        {editMode &&\r\n        <div>\r\n          <input onChange={onStatusChange} autoFocus onBlur={() => deactivateEditMode(status)} value={status}/>\r\n        </div>\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import s from \"./ProfileInfo.module.css\";\r\nimport React from \"react\";\r\n\r\ntype ContactsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nexport const Contacts = ({contactTitle, contactValue}: ContactsType) => {\r\n    return <div className={s.contact}>\r\n        {contactTitle}: {contactValue}\r\n    </div>\r\n}","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport s from \"./../common/FormsControls.module.css\"\r\n\r\n\r\nconst FormErrorMessage = React.memo(({error}: InjectedFormProps) => {\r\n    return <>\r\n        {error && <div className={s.formSummaryError}> {error} </div>}\r\n    </>\r\n})\r\n\r\nconst Error = reduxForm<any>({\r\n    form: 'error'\r\n})(FormErrorMessage)\r\n\r\nexport default Error;\r\n","import {useSelector} from \"react-redux\";\r\nimport {StoreStateType} from \"../../../redux/redux-store\";\r\nimport {ProfileType} from \"../../../redux/ProfileReducer\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport {Contacts} from \"./Contacts\";\r\nimport React from \"react\";\r\nimport Error from \"../../common/FormErrorMessage\";\r\n\r\ntype ProfileDataFormPropsType = {\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nexport const ProfileData = ({isOwner, goToEditMode}: ProfileDataFormPropsType) => {\r\n    let profile = useSelector<StoreStateType, ProfileType>(state => state.profilePage.profile)\r\n    return <>\r\n        <Error/>\r\n        <div className={`border-b padding-s-tb`}>\r\n            <h2>Full name:</h2> {profile.fullName}\r\n        </div>\r\n        <ProfileStatusWithHooks/>\r\n        <div className={`border-b padding-s-tb`}>\r\n            <h2>My professionals skills:</h2> {profile.lookingForAJobDescription}\r\n        </div>\r\n        <div className={`border-b padding-s-tb`}>\r\n            <h2>About me:</h2> {profile.aboutMe}\r\n        </div>\r\n        {profile.contacts && <div>\r\n            <h2>Contacts:</h2> {Object.keys(profile.contacts).filter(i => profile.contacts[i]).map(key => {\r\n               return <Contacts key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n        })}\r\n        </div>}\r\n        {isOwner && <div className={`offset-t`}>\r\n          <button onClick={() => {\r\n              goToEditMode()\r\n          }}> edit\r\n          </button>\r\n        </div>}\r\n    </>\r\n}","import React from 'react'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks'\r\nimport {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {InputFormsController, TextareaFormsController} from '../../common/FormsControls'\r\nimport {useSelector} from 'react-redux'\r\nimport {ForCreateFieldPropertiesType, StoreStateType} from '../../../redux/redux-store'\r\nimport {ProfileType} from '../../../redux/ProfileReducer'\r\nimport s from './ProfileInfo.module.css'\r\nimport {createField} from \"../../../utils/createField\";\r\n\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType>> = ({handleSubmit, error}) => {\r\n    let profile = useSelector<StoreStateType, ProfileType>(state => state.profilePage.profile)\r\n    return <>\r\n        <form onSubmit={handleSubmit}>\r\n            {error && <div className={s.formSummaryError}> {error} </div>}\r\n            <div>\r\n                <b>Full name:</b>\r\n                {createField<ForCreateFieldPropertiesType<ProfileType>>('Full name', \"fullName\", [], InputFormsController)}\r\n            </div>\r\n            <ProfileStatusWithHooks/>\r\n            <div>\r\n                <b>My professionals skills:</b>\r\n                {createField<ForCreateFieldPropertiesType<ProfileType>>('My professionals skills', \"lookingForAJobDescription\", [], TextareaFormsController)}\r\n            </div>\r\n            <div>\r\n                <b>About me:</b>\r\n                {createField<ForCreateFieldPropertiesType<ProfileType>>('About me', \"aboutMe\", [], TextareaFormsController)}\r\n            </div>\r\n            {profile.contacts && <div>\r\n              <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n                return <div key={key} className={s.contact}>\r\n                    <b>{key}: {createField(key, 'contacts.' + key, [], TextareaFormsController)}</b>\r\n                </div>\r\n            })}\r\n            </div>}\r\n            <div className={`offset-t`}>\r\n                <button> save </button>\r\n            </div>\r\n        </form>\r\n    </>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType>({\r\n    form: 'edit-profile'\r\n})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm\r\n\r\n","import React, {useState} from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {ProfileType, savePhotoTC, saveProfileTC} from \"../../../redux/ProfileReducer\";\r\nimport Preloader from \"../../common/Preloader\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StoreStateType} from \"../../../redux/redux-store\";\r\nimport Avatar from \"../../common/Avatar\";\r\nimport {ProfilePropsType} from \"../Profile\";\r\nimport {ProfileData} from \"./ProfileData\";\r\nimport ProfileDataFormReduxForm from \"./ProfileDataForm\";\r\n\r\n\r\nconst ProfileInfo = ({isOwner}: ProfilePropsType) => {\r\n    const dispatch = useDispatch()\r\n    const profile = useSelector<StoreStateType, ProfileType>(state => state.profilePage.profile)\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: React.SyntheticEvent<EventTarget>) => {\r\n        const formInput = (e.target as HTMLFormElement).files;\r\n        if (formInput.length) {\r\n            dispatch(savePhotoTC(formInput[0]))\r\n        }\r\n    }\r\n\r\n    const goToEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        dispatch(saveProfileTC(formData))\r\n        setEditMode(false)\r\n    }\r\n\r\n    return <div>\r\n        <div className={`col ${s.ava}`}>\r\n            {profile.photos?.large ? <img src={profile.photos?.large} alt={''} className=\"img-circle large\"/> : <Avatar />}\r\n            {isOwner && <input type=\"file\" onChange={onMainPhotoSelected} className={s.selectInput}/>}\r\n            {editMode ? <ProfileDataFormReduxForm initialValues={profile} onSubmit={onSubmit}/> :\r\n                <ProfileData isOwner={isOwner} goToEditMode={goToEditMode}/>}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\nexport type ProfilePropsType = {\r\n    isOwner: boolean\r\n}\r\n\r\nexport const Profile = ({isOwner}: ProfilePropsType) => {\r\n    return <>\r\n        <ProfileInfo isOwner={isOwner}/>\r\n    </>\r\n}\r\n\r\nexport default Profile;\r\n","import React, {useEffect, useRef} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Profile from \"./Profile\";\r\nimport {getUserProfileTC, setStatusTC} from \"../../redux/ProfileReducer\";\r\nimport {StoreStateType} from \"../../redux/redux-store\";\r\nimport {useParams, Redirect} from 'react-router-dom';\r\nimport Preloader from \"../common/Preloader\";\r\nimport {AuthPropsType} from \"../../redux/AuthReducer\";\r\nimport useGaTracker from \"../../useGaTracker\";\r\n\r\n\r\nexport const ProfileComponent = () => {\r\n    useGaTracker()\r\n    let dispatch = useDispatch()\r\n    const user = useSelector<StoreStateType, AuthPropsType>(state => state.auth)\r\n    const isFetching = useSelector<StoreStateType, boolean>(state => state.profilePage.isFetching)\r\n    let {userId} = useParams<{ userId?: string | undefined }>()\r\n    const meId = useRef((user.id.toString()))\r\n\r\n    useEffect(() => {\r\n        if (!userId) {\r\n            dispatch(getUserProfileTC(meId.current))\r\n            dispatch(setStatusTC(meId.current))\r\n        } else {\r\n            dispatch(getUserProfileTC(userId))\r\n            dispatch(setStatusTC(userId))\r\n        }\r\n    }, [dispatch, userId, user])\r\n\r\n    if (!user.isAuth && !userId) return <Redirect to={'/login'}/>\r\n    return (\r\n        <>\r\n            <div>{isFetching && <Preloader/>}</div>\r\n            <Profile isOwner={!userId}/>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport {Redirect, Route, Switch, withRouter} from \"react-router-dom\"\r\nimport s from './App.module.css';\r\nimport {UsersPageComponent} from \"./components/users/UsersContainer\";\r\nimport {withSuspense} from \"./hoc/withSuspense\";\r\nimport {Login} from \"./components/login/Login\";\r\nimport {ProfileComponent} from \"./components/profile/ProfileComponent\";\r\nimport {compose} from \"redux\";\r\nimport useGaTracker from \"./useGaTracker\";\r\n\r\n\r\nconst Messages = React.lazy(() => import('./components/dialogs/Message/MessagesPage'));\r\nconst ChatPage = React.lazy(() => import('./components/chat/ChatPage'));\r\n\r\nexport const PATH = {\r\n    PROFILE: \"/profile\",\r\n    LOGIN: \"/login\",\r\n    MESSAGES: \"/dialogs\",\r\n    CHAT: \"/chat\",\r\n    USERS: \"/users\",\r\n    //  ERROR: \"/error404\",\r\n}\r\n\r\nconst Routes = () => {\r\n    useGaTracker()\r\n    return (\r\n        <div className={s.appWrapperContent}>\r\n            <Switch>\r\n                <Route exact path={'/'} render={() => <Redirect to={PATH.PROFILE}/>}/>\r\n                <Route path={PATH.PROFILE + '/:userId?'} render={() => <ProfileComponent/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <Login/>}/>\r\n                <Route path={PATH.MESSAGES + '/:userId?'} render={withSuspense(Messages)}/>\r\n                <Route path={PATH.CHAT} render={withSuspense(ChatPage)}/>\r\n                <Route path={PATH.USERS} render={() => <UsersPageComponent/>}/>\r\n                <Route path={'*'} render={() => <div> Error 404 </div>}/>\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default compose<React.ComponentType>(withRouter)(Routes);","import React from 'react';\r\nimport s from './nav.module.css';\r\nimport NavBar from \"./NavBar\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../Routes\";\r\n\r\n\r\nconst Nav = () => {\r\n    return <nav className={`col ${s.nav}`}>\r\n        <NavLink to={PATH.PROFILE} activeClassName={s.activeLink}> <NavBar name={\"Profile\"}/> </NavLink>\r\n        <NavLink to={PATH.MESSAGES} activeClassName={s.activeLink}> <NavBar name={\"Message\"}/> </NavLink>\r\n        <NavLink to={PATH.CHAT} activeClassName={s.activeLink}> <NavBar name={\"Chat\"}/> </NavLink>\r\n        <NavLink to={PATH.USERS} activeClassName={s.activeLink}> <NavBar name={\"Users\"}/> </NavLink>\r\n    </nav>\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport s from './header.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {HeaderContainerPropsType} from \"./HeaderContainer\";\r\n\r\n\r\nconst Header = (props: HeaderContainerPropsType) => {\r\n    return <header className={`row ${s.header}`}>\r\n        <div className={s.loginBlock}>\r\n            {props.isAuth\r\n                ? <div>{props.login} <button onClick={props.logoutTC} className=\"offset-l\"> Log out </button></div>\r\n                : <NavLink to={'login'}> Login </NavLink>}\r\n        </div>\r\n    </header>\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport {logoutTC} from \"../../redux/AuthReducer\";\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {StoreStateType} from \"../../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    login: string,\r\n    isAuth: boolean,\r\n}\r\ntype MapDispatchPropsType = {\r\n    logoutTC: () => void\r\n}\r\nexport type HeaderContainerPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerPropsType> {\r\n\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: StoreStateType): MapStatePropsType => {\r\n    return {\r\n        login: state.auth.login,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {logoutTC})(HeaderContainer);\r\n","import React, {useEffect} from 'react';\r\nimport {useHistory, withRouter} from \"react-router-dom\"\r\nimport {compose} from \"redux\";\r\n\r\ntype PropsLocationType = {\r\n    selectedPage: string\r\n}\r\n\r\nconst GoogleAnalytics = (props: PropsLocationType) => {\r\n    const history = useHistory();\r\n    const currentLocation = history.location.pathname // запись просмотров\r\n    useEffect(() => {\r\n        //@ts-ignore\r\n        const gtag = window.gtag;\r\n        if (currentLocation === props.selectedPage) {\r\n            return;\r\n        }\r\n\r\n        if (history.action === 'PUSH' &&\r\n            typeof(gtag) === 'function') {\r\n            gtag('config', 'G-PLD8EZQCMZ', {\r\n                'page_title': document.title,\r\n                'page_location': window.location.href,\r\n                'page_path': currentLocation\r\n            });\r\n        }\r\n    })\r\n    console.log(window)\r\n    console.log( 'History: ' + history.action)\r\n    console.log( 'SelectedPage: ' + props.selectedPage)\r\n    console.log( 'CurrentLocation: ' + currentLocation)\r\n\r\n    return (\r\n        <></>\r\n    );\r\n}\r\n\r\nexport default compose<React.ComponentType<PropsLocationType>>(withRouter)(GoogleAnalytics);","import React, {useEffect} from 'react';\r\nimport {useHistory, withRouter} from \"react-router-dom\"\r\nimport s from './App.module.css';\r\nimport Nav from \"./components/nav/Nav\";\r\nimport HeaderContainer from \"./components/header/HeaderContainer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeAppTC} from \"./redux/AppReducer\";\r\nimport {StoreStateType} from \"./redux/redux-store\";\r\nimport Preloader from \"./components/common/Preloader\";\r\nimport {getAuthUserDataTC} from \"./redux/AuthReducer\";\r\nimport Routes from \"./Routes\";\r\nimport GoogleAnalytics from \"./GoogleAnalytics\";\r\n\r\n\r\nconst App = () => {\r\n    const dispatch = useDispatch()\r\n    const initialized = useSelector<StoreStateType, boolean>(state => state.app.initialized)\r\n    const catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n        console.log(\"Some error occurred: \" + e)\r\n    }\r\n\r\n    const history = useHistory();\r\n    const selectedPage = history.location.pathname // запись просмотров TODO: не то\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n        dispatch(getAuthUserDataTC())\r\n        window.addEventListener(\"unhandledrejection\", catchAllUnhandledErrors)\r\n        window.removeEventListener(\"unhandledrejection\", catchAllUnhandledErrors)\r\n    })\r\n\r\n    if (!initialized) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={`full-size col gap-offset ${s.appWrapper}`}>\r\n            <HeaderContainer/>\r\n            <main className={`row top ${s.main}`}>\r\n                <Nav/>\r\n                <Routes/>\r\n                <GoogleAnalytics selectedPage={selectedPage}/>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default compose<React.ComponentType>(withRouter)(App);","import React from 'react';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./redux/redux-store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport App from \"./App\";\r\n\r\n\r\nconst SamuraiAppContainer = () => {\r\n    return <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>\r\n}\r\n\r\nexport default SamuraiAppContainer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport SamuraiAppContainer from \"./AppContainer\";\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <SamuraiAppContainer/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\nreportWebVitals();\r\n\r\n","import { useEffect, useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport ReactGA from \"react-ga\";\r\n\r\nconst useGaTracker = () => {\r\n  const location = useLocation();\r\n  const [initialized, setInitialized] = useState(false);\r\n  const [pathnameCount, setPathnameCount] = useState(0);\r\n  const [searchCount, setSearchCount] = useState({});\r\n\r\n  useEffect(() => {\r\n    if (!window.location.href.includes(\"localhost\")) {\r\n      ReactGA.initialize(\"G-PLD8EZQCMZ\");\r\n      setInitialized(true);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (initialized) {\r\n      ReactGA.pageview(location.pathname + window.document.location.hash);\r\n    }\r\n  }, [initialized, location]);\r\n  console.log(location.pathname + window.document.location.hash)\r\n};\r\n\r\nexport default useGaTracker;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectInput\":\"ProfileInfo_selectInput__1d4kB\"};","import {instance, APIResponseType} from \"./api\"\r\nimport {UsersType} from \"../redux/UsersReducer\";\r\n\r\nexport const getUsersAPI = {\r\n  getUsers(currentPage = 1, pageSize = 10, term = '', friend: null | boolean) {\r\n    return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + ( friend === null ? `` : `&friend=${friend}`))\r\n        .then(response => response.data)\r\n  }\r\n}\r\n\r\nexport const usersAPI = {\r\n  unfollow(id: string) {\r\n    return instance.delete<APIResponseType>(`follow/${id}`)\r\n  },\r\n  follow(id: string) {\r\n    return instance.post<APIResponseType>(`follow/${id}`)\r\n  },\r\n}\r\n\r\ntype GetItemsType = {\r\n  items: Array<UsersType>\r\n  totalCount: number\r\n  error: string | null\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"nav_nav__QoptV\",\"activeLink\":\"nav_activeLink__2Z1bg\",\"item\":\"nav_item__rt6Bv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2fNsP\",\"error\":\"FormsControls_error__3dFXe\",\"formSummaryError\":\"FormsControls_formSummaryError__XE8DR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__1ihcl\",\"appWrapper\":\"App_appWrapper__2vnkC\",\"appWrapperContent\":\"App_appWrapperContent__2wL90\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"users_users__2GODL\"};","import React from \"react\";\r\n\r\n\r\nconst Avatar = () => {\r\n    let avatar = \"https://cdn.pixabay.com/photo/2016/04/02/04/57/comic-1302161_1280.png\"\r\n    return <>\r\n        <img src={avatar} alt={''} className=\"img-circle\"/>\r\n    </>\r\n}\r\n\r\nexport default Avatar;","import {instance} from \"./api\"\r\n\r\n\r\nexport const dialogsAPI = {\r\n    dialogPUT(userId: number) { // начало диолога\r\n        return instance.put(`dialogs/${userId}`)\r\n    },\r\n    getAllDialogsGET() {\r\n        return instance.get(`dialogs`)\r\n    },\r\n    getFriendMessagesGET(userId: number, page: number, count: number) {\r\n        return instance.get(`dialogs/${userId}/messages?page=${page}&count=${count}`)\r\n    },\r\n    sendFriendMessagePOST(userId: number, message: string) {\r\n        return instance.post(`dialogs/${userId}/messages`, {body: message})\r\n    },\r\n    isViewedMessageGET(messageId: string) {\r\n        return instance.get(`dialogs/messages/${messageId}/viewed`)\r\n    },\r\n    sendMessageSpamPOST(messageId: string) {\r\n        return instance.post(`dialogs/messages/${messageId}/spam`)\r\n    },\r\n    deleteOnlyForMeDELETE(messageId: string) {\r\n        return instance.delete(`dialogs/messages/${messageId}`)\r\n    },\r\n    restoreMessagePUT(messageId: number) {\r\n        return instance.put(`dialogs/messages/${messageId}/restore`)\r\n    },\r\n    getMessagesNewestDateGET(userId: number, date: string) {\r\n        return instance.get(`dialogs/${userId}/messages/new?newerThen=${date}`)\r\n    },\r\n    newMessageListGET() {\r\n        return instance.get(`dialogs/messages/new/count`)\r\n    }\r\n}\r\n\r\ntype DilogsResponseType = {}","import {MessageDataType} from \"../redux/DialogsReducer\";\r\n\r\nexport function combineMessages(arr: MessageDataType[], arr2: MessageDataType[]): MessageDataType[] {\r\n  if (arr.length === 0) {\r\n    return arr.concat(...arr2)\r\n  } else {\r\n    // @ts-ignore\r\n    let u = arr2.findIndex(item => item.id === arr[0].id)\r\n    if (u !== -1) {\r\n      arr2.splice(u, 20)\r\n      return arr2.concat([...arr])\r\n    } else {\r\n      return arr2.concat([...arr])\r\n    }\r\n  }\r\n}","import {Dispatch} from \"redux\";\r\nimport {dialogsAPI} from \"../api/dialogs-api\";\r\nimport {\r\n    FilterType,\r\n    PhotoUsersType,\r\n    UsersType\r\n} from \"./UsersReducer\";\r\nimport {getUsersAPI} from \"../api/users-api\";\r\nimport {combineMessages} from \"../utils/messages.helper\";\r\n\r\nexport type MessageLoadingStatusType = 'loading' | 'failed' | 'success' | null\r\nexport type MessageDataType = {\r\n    addedAt: string //\"2021-08-25T16:01:39.11\"\r\n    body: string //\"Hello\"\r\n    deletedByRecipient: boolean //false\r\n    deletedBySender: boolean //false\r\n    distributionId: null\r\n    id: string //\"3b069c31-f62a-4339-9c90-ac8bedfea383\"\r\n    isSpam: boolean //false\r\n    recipientId: number //18919\r\n    recipientName: string //\"messi\"\r\n    senderId: number //15444\r\n    senderName: string //\"GalinovskayaA\"\r\n    translatedBody: null\r\n    isViewed: boolean\r\n    viewed: boolean\r\n}\r\nexport type FriendDialogsType = {\r\n    hasNewMessages: boolean\r\n    id: number\r\n    lastDialogActivityDate: string\r\n    lastUserActivityDate: string\r\n    newMessagesCount: number\r\n    photos: PhotoUsersType\r\n    userName: string\r\n}\r\n\r\nexport type DialogsType = {\r\n    messageData: Array<MessageDataType>\r\n    friendsDialogs: Array<FriendDialogsType>\r\n    friends: Array<UsersType>\r\n    totalFriendsCount: number\r\n    page: number\r\n    count: number\r\n    isStartDialog: boolean\r\n    isLoadingMessage: MessageLoadingStatusType\r\n    isNoMessage: boolean\r\n}\r\n\r\nconst initialState: DialogsType = {\r\n    messageData: [] as Array<MessageDataType>,\r\n    friendsDialogs: [] as Array<FriendDialogsType>,\r\n    friends: [] as Array<UsersType>,\r\n    totalFriendsCount: 0,\r\n    page: 1,\r\n    count: 30,\r\n    isStartDialog: false,\r\n    isLoadingMessage: null,\r\n    isNoMessage: false\r\n}\r\n\r\nexport const dialogsReducer = (state = initialState, action: ActionDialogType): DialogsType => {\r\n    switch (action.type) {\r\n        case 'SN/DIALOGS/START-DIALOG': {\r\n            return {\r\n                ...state,\r\n                isStartDialog: action.isStartDialog,\r\n            }\r\n        }\r\n        case 'SN/DIALOGS/GET-FRIENDS-DIALOGS': {\r\n            return {\r\n                ...state,\r\n                friendsDialogs: action.friendsDialogs,\r\n            }\r\n        }\r\n        case 'SN/DIALOGS/SET-FRIENDS': {\r\n            return {\r\n                ...state,\r\n                friends: action.friends\r\n            }\r\n        }\r\n        case 'SN/DIALOGS/SET-PAGE': {\r\n            return {\r\n                ...state,\r\n                page: action.page\r\n            }\r\n        }\r\n        case 'SN/DIALOGS/SET-COUNT': {\r\n            return {\r\n                ...state,\r\n                count: action.count\r\n            }\r\n        }\r\n        case 'SN/DIALOGS/SET-TOTAL-FRIENDS-COUNT': {\r\n            return {\r\n                ...state,\r\n                totalFriendsCount: action.totalFriendsCount\r\n            }\r\n        }\r\n        case 'SN/DIALOGS/SET-MESSAGES': {\r\n            return {\r\n                ...state,\r\n                messageData: action.messageData,\r\n\r\n            }\r\n        }\r\n        case 'SN/DIALOGS/IS-VIEWED': {\r\n            return {\r\n                ...state,\r\n                messageData: state.messageData.map(m => {\r\n                    return {...m, ...{isViewed: action.isViewed}}\r\n                }),\r\n            }\r\n        }\r\n        case 'SN/DIALOGS/IS-LOADING-MESSAGE': {\r\n            return {\r\n                ...state,\r\n                isLoadingMessage: action.isLoadingMessage,\r\n            }\r\n        }\r\n        case 'SN/DIALOGS/IS-NO-MESSAGE': {\r\n            return {\r\n                ...state,\r\n                isNoMessage: action.isNoMessage,\r\n            }\r\n        }\r\n        case 'SN/DIALOGS/SEND-MESSAGE': {\r\n            return {\r\n                ...state,\r\n                messageData: [...state.messageData, action.message],\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// ----- Actions -----\r\n\r\nexport const startDialogAC = (isStartDialog: boolean) => {\r\n    return {\r\n        type: 'SN/DIALOGS/START-DIALOG', isStartDialog: isStartDialog\r\n    } as const\r\n}\r\nexport const getAllDialogsAC = (friendsDialogs: Array<FriendDialogsType>) => {\r\n    return {\r\n        type: 'SN/DIALOGS/GET-FRIENDS-DIALOGS', friendsDialogs: friendsDialogs\r\n    } as const\r\n}\r\nexport const setFriendsAC = (friends: Array<UsersType>) => {\r\n    return {type: 'SN/DIALOGS/SET-FRIENDS', friends: friends} as const\r\n}\r\nexport const setPageAC = (page: number) => {\r\n    return {type: 'SN/DIALOGS/SET-PAGE', page: page} as const\r\n}\r\nexport const setCountAC = (count: number) => {\r\n    return {type: 'SN/DIALOGS/SET-COUNT', count: count} as const\r\n}\r\nexport const setTotalFriendsCountAC = (totalFriendsCount: number) => {\r\n    return {type: 'SN/DIALOGS/SET-TOTAL-FRIENDS-COUNT', totalFriendsCount: totalFriendsCount} as const\r\n}\r\nexport const setMessagesAC = (messageData: Array<MessageDataType>) => {\r\n    return {\r\n        type: 'SN/DIALOGS/SET-MESSAGES', messageData: messageData\r\n    } as const\r\n}\r\nexport const setIsViewedAC = (isViewed: boolean) => {\r\n    return {\r\n        type: 'SN/DIALOGS/IS-VIEWED', isViewed: isViewed\r\n    } as const\r\n}\r\nexport const isLoadingMessageAC = (isLoadingMessage: MessageLoadingStatusType) => {\r\n    return {\r\n        type: 'SN/DIALOGS/IS-LOADING-MESSAGE', isLoadingMessage: isLoadingMessage\r\n    } as const\r\n}\r\nexport const isNoMessageAC = (isNoMessage: boolean) => {\r\n    return {\r\n        type: 'SN/DIALOGS/IS-NO-MESSAGE', isNoMessage: isNoMessage\r\n    } as const\r\n}\r\nexport const sendMessageAC = (message: MessageDataType) => {\r\n    return {\r\n        type: 'SN/DIALOGS/SEND-MESSAGE', message: message\r\n    } as const\r\n}\r\n\r\n\r\n// ----- Thunk -----\r\n\r\nexport const startDialogsTC = (userId: number) => {\r\n    return async () => {\r\n        await dialogsAPI.dialogPUT(userId)\r\n    }\r\n}\r\n\r\nexport const getAllDialogsTC = () => { // активность, наличие новых сообщений\r\n    return async (dispatch: Dispatch) => {\r\n        let data = await dialogsAPI.getAllDialogsGET()\r\n        dispatch(getAllDialogsAC(data.data))\r\n    }\r\n}\r\nexport const getFriendMessagesTC = (userId: number, page: number, count: number, messageData: MessageDataType[] = []) => {\r\n    return async (dispatch: Dispatch) => { // сообщения друга не больше 20\r\n        let data = await dialogsAPI.getFriendMessagesGET(userId, page, count)\r\n        const newMessageData = combineMessages(messageData, data.data.items)\r\n        if (data.data.items.length === 0) {\r\n            dispatch(isNoMessageAC(true))\r\n            return\r\n        }\r\n        dispatch(setMessagesAC(newMessageData))\r\n        dispatch(startDialogAC(true))\r\n    }\r\n}\r\nexport const sendFriendMessageTC = (userId: number, message: string) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(isLoadingMessageAC('loading'))\r\n        let data = await dialogsAPI.sendFriendMessagePOST(userId, message)\r\n        if (data.data.resultCode === 0) {\r\n            dispatch(isLoadingMessageAC('success'))\r\n            dispatch(sendMessageAC(data.data.data.message))\r\n        } else {\r\n            dispatch(isLoadingMessageAC('failed'))\r\n        }\r\n    }\r\n}\r\n\r\nexport const messageIsSpamTC = (messageId: string) => {\r\n    return async () => {\r\n        await dialogsAPI.sendMessageSpamPOST(messageId)\r\n    }\r\n}\r\n\r\nexport const messageDeleteTC = (messageId: string) => {\r\n    return async () => {\r\n        await dialogsAPI.deleteOnlyForMeDELETE(messageId)\r\n    }\r\n}\r\n\r\nexport const getFriendsTC = (page: number, count: number, filter: FilterType) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(setPageAC(page))\r\n        dispatch(setCountAC(count))\r\n        let data = await getUsersAPI.getUsers(page, count, filter.term, filter.friend);\r\n        dispatch(setFriendsAC(data.items))\r\n        dispatch(setTotalFriendsCountAC(data.totalCount))\r\n    }\r\n}\r\n\r\n// ----- Types -----\r\n\r\ntype ActionDialogType =\r\n    StartDialogACType\r\n    | GetAllDialogACType\r\n    | SetFriendsACType\r\n    | SetPageACType\r\n    | SetCountACType\r\n    | SetTotalFriendsCountACType\r\n    | SetMessagesACType\r\n    | SetIsViewedACType\r\n    | IsLoadingMessageACType\r\n    | SendMessageACType\r\n    | IsNoMessageACType\r\ntype StartDialogACType = ReturnType<typeof startDialogAC>\r\ntype GetAllDialogACType = ReturnType<typeof getAllDialogsAC>\r\ntype SetFriendsACType = ReturnType<typeof setFriendsAC>\r\ntype SetPageACType = ReturnType<typeof setPageAC>\r\ntype SetCountACType = ReturnType<typeof setCountAC>\r\ntype SetTotalFriendsCountACType = ReturnType<typeof setTotalFriendsCountAC>\r\ntype SetMessagesACType = ReturnType<typeof setMessagesAC>\r\ntype SetIsViewedACType = ReturnType<typeof setIsViewedAC>\r\ntype IsLoadingMessageACType = ReturnType<typeof isLoadingMessageAC>\r\ntype IsNoMessageACType = ReturnType<typeof isNoMessageAC>\r\ntype SendMessageACType = ReturnType<typeof sendMessageAC>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__2SITi\",\"page\":\"Paginator_page__3C2K1\",\"range\":\"Paginator_range__2J2px\"};","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n  withCredentials: true,\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n  headers: {\r\n    \"API-KEY\": \"c40b2e0c-9f6f-47ff-9727-98eaeb656c77\"\r\n  }\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n  Success = 0,\r\n  Error = 1\r\n}\r\nexport enum ResultCodeForCaptchaEnum {\r\n  CaptchaIsRequired = 10\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n  data: D\r\n  resultCode: RC\r\n  messages: Array<string>\r\n}\r\nexport type APIDataResponseType = {\r\n  data: APIResponseType\r\n}"],"sourceRoot":""}